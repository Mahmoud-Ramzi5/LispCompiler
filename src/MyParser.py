# Generated from MyParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,99,1052,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,1,0,3,0,160,8,0,1,0,1,0,1,1,4,1,165,8,1,11,1,12,1,166,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,244,8,2,10,2,12,2,247,9,
        2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,255,8,3,1,3,1,3,1,3,1,3,4,3,261,8,
        3,11,3,12,3,262,1,4,1,4,1,4,1,4,1,4,3,4,270,8,4,1,4,1,4,1,4,1,4,
        3,4,276,8,4,4,4,278,8,4,11,4,12,4,279,1,5,1,5,5,5,284,8,5,10,5,12,
        5,287,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,298,8,6,10,6,12,
        6,301,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,3,8,313,8,8,1,
        8,5,8,316,8,8,10,8,12,8,319,9,8,1,9,1,9,3,9,323,8,9,1,9,1,9,3,9,
        327,8,9,1,9,1,9,3,9,331,8,9,3,9,333,8,9,1,10,1,10,1,10,1,10,3,10,
        339,8,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,3,12,349,8,12,1,
        13,1,13,1,13,1,14,1,14,1,14,3,14,357,8,14,1,15,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,16,1,16,4,16,369,8,16,11,16,12,16,370,1,17,1,
        17,5,17,375,8,17,10,17,12,17,378,9,17,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,5,18,387,8,18,10,18,12,18,390,9,18,1,18,1,18,5,18,394,8,
        18,10,18,12,18,397,9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,
        406,8,19,10,19,12,19,409,9,19,1,19,1,19,5,19,413,8,19,10,19,12,19,
        416,9,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
        5,22,429,8,22,10,22,12,22,432,9,22,1,22,1,22,4,22,436,8,22,11,22,
        12,22,437,1,23,1,23,1,23,1,24,1,24,1,24,1,24,5,24,447,8,24,10,24,
        12,24,450,9,24,1,24,1,24,5,24,454,8,24,10,24,12,24,457,9,24,1,25,
        1,25,1,25,1,25,1,25,5,25,464,8,25,10,25,12,25,467,9,25,1,25,1,25,
        4,25,471,8,25,11,25,12,25,472,1,26,1,26,5,26,477,8,26,10,26,12,26,
        480,9,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,5,28,489,8,28,10,28,
        12,28,492,9,28,1,29,1,29,1,29,1,29,1,29,1,29,5,29,500,8,29,10,29,
        12,29,503,9,29,1,30,1,30,1,30,1,30,1,30,1,30,5,30,511,8,30,10,30,
        12,30,514,9,30,1,31,1,31,1,31,1,31,1,31,1,31,5,31,522,8,31,10,31,
        12,31,525,9,31,1,32,1,32,1,32,1,32,1,32,1,32,5,32,533,8,32,10,32,
        12,32,536,9,32,1,33,1,33,1,33,1,33,1,33,1,33,5,33,544,8,33,10,33,
        12,33,547,9,33,1,34,1,34,1,34,1,34,1,34,5,34,554,8,34,10,34,12,34,
        557,9,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,5,37,567,8,37,10,
        37,12,37,570,9,37,1,38,1,38,1,38,1,39,1,39,5,39,577,8,39,10,39,12,
        39,580,9,39,1,40,1,40,5,40,584,8,40,10,40,12,40,587,9,40,1,41,1,
        41,1,41,5,41,592,8,41,10,41,12,41,595,9,41,1,41,1,41,1,42,1,42,1,
        42,5,42,602,8,42,10,42,12,42,605,9,42,1,42,1,42,1,43,1,43,5,43,611,
        8,43,10,43,12,43,614,9,43,1,44,1,44,1,44,1,44,3,44,620,8,44,1,45,
        1,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,630,8,46,10,46,12,46,633,
        9,46,1,46,1,46,5,46,637,8,46,10,46,12,46,640,9,46,1,47,1,47,1,47,
        1,47,1,47,3,47,647,8,47,5,47,649,8,47,10,47,12,47,652,9,47,1,47,
        1,47,1,48,1,48,1,48,1,48,5,48,660,8,48,10,48,12,48,663,9,48,1,48,
        1,48,5,48,667,8,48,10,48,12,48,670,9,48,1,49,1,49,1,49,1,49,1,49,
        3,49,677,8,49,5,49,679,8,49,10,49,12,49,682,9,49,1,49,1,49,1,50,
        1,50,1,50,1,51,1,51,5,51,691,8,51,10,51,12,51,694,9,51,1,52,1,52,
        5,52,698,8,52,10,52,12,52,701,9,52,1,53,1,53,1,53,5,53,706,8,53,
        10,53,12,53,709,9,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,
        1,55,1,55,4,55,722,8,55,11,55,12,55,723,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,5,56,733,8,56,10,56,12,56,736,9,56,1,56,1,56,5,56,740,
        8,56,10,56,12,56,743,9,56,1,57,1,57,1,57,1,57,1,57,4,57,750,8,57,
        11,57,12,57,751,1,58,1,58,1,58,1,59,1,59,1,59,1,59,4,59,761,8,59,
        11,59,12,59,762,1,59,1,59,5,59,767,8,59,10,59,12,59,770,9,59,1,60,
        1,60,1,60,1,60,4,60,776,8,60,11,60,12,60,777,1,60,1,60,5,60,782,
        8,60,10,60,12,60,785,9,60,1,61,1,61,1,61,1,61,4,61,791,8,61,11,61,
        12,61,792,1,61,1,61,5,61,797,8,61,10,61,12,61,800,9,61,1,62,1,62,
        1,62,1,62,4,62,806,8,62,11,62,12,62,807,1,62,1,62,5,62,812,8,62,
        10,62,12,62,815,9,62,1,63,1,63,1,63,5,63,820,8,63,10,63,12,63,823,
        9,63,1,63,1,63,5,63,827,8,63,10,63,12,63,830,9,63,1,64,1,64,1,64,
        5,64,835,8,64,10,64,12,64,838,9,64,1,64,1,64,5,64,842,8,64,10,64,
        12,64,845,9,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,5,66,858,8,66,10,66,12,66,861,9,66,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,5,67,870,8,67,10,67,12,67,873,9,67,1,68,1,68,1,68,3,68,
        878,8,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,3,70,
        890,8,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,901,8,
        71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,5,72,911,8,72,10,72,12,
        72,914,9,72,1,72,1,72,3,72,918,8,72,1,72,1,72,1,73,1,73,1,73,1,73,
        1,74,1,74,1,75,1,75,1,75,1,75,1,75,3,75,933,8,75,1,76,1,76,1,76,
        1,76,1,76,3,76,940,8,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,
        949,8,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,4,76,958,8,76,11,76,
        12,76,959,1,76,1,76,1,76,1,76,1,76,1,76,1,76,4,76,969,8,76,11,76,
        12,76,970,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,4,76,981,8,76,
        11,76,12,76,982,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,4,76,
        994,8,76,11,76,12,76,995,1,76,3,76,999,8,76,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,4,77,1016,
        8,77,11,77,12,77,1017,1,77,1,77,1,77,1,77,1,77,4,77,1025,8,77,11,
        77,12,77,1026,1,77,1,77,1,77,1,77,1,77,1,77,1,77,4,77,1036,8,77,
        11,77,12,77,1037,3,77,1040,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,
        78,1,78,3,78,1050,8,78,1,78,0,0,79,0,2,4,6,8,10,12,14,16,18,20,22,
        24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
        68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,0,9,1,0,80,84,1,0,86,91,1,0,
        92,93,1,0,93,94,2,0,92,92,94,94,2,0,2,2,30,30,1,0,92,94,4,0,3,3,
        26,26,28,28,73,74,1,0,95,96,1166,0,159,1,0,0,0,2,164,1,0,0,0,4,168,
        1,0,0,0,6,250,1,0,0,0,8,264,1,0,0,0,10,281,1,0,0,0,12,290,1,0,0,
        0,14,302,1,0,0,0,16,308,1,0,0,0,18,332,1,0,0,0,20,334,1,0,0,0,22,
        340,1,0,0,0,24,343,1,0,0,0,26,350,1,0,0,0,28,353,1,0,0,0,30,358,
        1,0,0,0,32,362,1,0,0,0,34,372,1,0,0,0,36,379,1,0,0,0,38,398,1,0,
        0,0,40,417,1,0,0,0,42,421,1,0,0,0,44,425,1,0,0,0,46,439,1,0,0,0,
        48,442,1,0,0,0,50,458,1,0,0,0,52,474,1,0,0,0,54,481,1,0,0,0,56,485,
        1,0,0,0,58,493,1,0,0,0,60,504,1,0,0,0,62,515,1,0,0,0,64,526,1,0,
        0,0,66,537,1,0,0,0,68,548,1,0,0,0,70,558,1,0,0,0,72,561,1,0,0,0,
        74,564,1,0,0,0,76,571,1,0,0,0,78,574,1,0,0,0,80,581,1,0,0,0,82,588,
        1,0,0,0,84,598,1,0,0,0,86,608,1,0,0,0,88,615,1,0,0,0,90,621,1,0,
        0,0,92,625,1,0,0,0,94,641,1,0,0,0,96,655,1,0,0,0,98,671,1,0,0,0,
        100,685,1,0,0,0,102,688,1,0,0,0,104,695,1,0,0,0,106,702,1,0,0,0,
        108,712,1,0,0,0,110,716,1,0,0,0,112,725,1,0,0,0,114,744,1,0,0,0,
        116,753,1,0,0,0,118,756,1,0,0,0,120,771,1,0,0,0,122,786,1,0,0,0,
        124,801,1,0,0,0,126,816,1,0,0,0,128,831,1,0,0,0,130,846,1,0,0,0,
        132,850,1,0,0,0,134,862,1,0,0,0,136,877,1,0,0,0,138,879,1,0,0,0,
        140,883,1,0,0,0,142,893,1,0,0,0,144,904,1,0,0,0,146,921,1,0,0,0,
        148,925,1,0,0,0,150,927,1,0,0,0,152,998,1,0,0,0,154,1039,1,0,0,0,
        156,1049,1,0,0,0,158,160,3,2,1,0,159,158,1,0,0,0,159,160,1,0,0,0,
        160,161,1,0,0,0,161,162,5,0,0,1,162,1,1,0,0,0,163,165,3,4,2,0,164,
        163,1,0,0,0,165,166,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,
        3,1,0,0,0,168,245,5,76,0,0,169,244,5,92,0,0,170,244,5,93,0,0,171,
        244,5,94,0,0,172,244,5,95,0,0,173,244,3,4,2,0,174,244,3,6,3,0,175,
        244,3,8,4,0,176,244,3,22,11,0,177,244,3,24,12,0,178,244,3,26,13,
        0,179,244,3,28,14,0,180,244,3,30,15,0,181,244,3,32,16,0,182,244,
        3,34,17,0,183,244,3,36,18,0,184,244,3,38,19,0,185,244,3,40,20,0,
        186,244,3,42,21,0,187,244,3,44,22,0,188,244,3,46,23,0,189,244,3,
        48,24,0,190,244,3,50,25,0,191,244,3,52,26,0,192,244,3,54,27,0,193,
        244,3,56,28,0,194,244,3,58,29,0,195,244,3,60,30,0,196,244,3,62,31,
        0,197,244,3,64,32,0,198,244,3,66,33,0,199,244,3,68,34,0,200,244,
        3,70,35,0,201,244,3,72,36,0,202,244,3,74,37,0,203,244,3,76,38,0,
        204,244,3,78,39,0,205,244,3,80,40,0,206,244,3,82,41,0,207,244,3,
        84,42,0,208,244,3,86,43,0,209,244,3,88,44,0,210,244,3,90,45,0,211,
        244,3,92,46,0,212,244,3,94,47,0,213,244,3,96,48,0,214,244,3,98,49,
        0,215,244,3,100,50,0,216,244,3,102,51,0,217,244,3,104,52,0,218,244,
        3,106,53,0,219,244,3,108,54,0,220,244,3,110,55,0,221,244,3,112,56,
        0,222,244,3,114,57,0,223,244,3,116,58,0,224,244,3,118,59,0,225,244,
        3,120,60,0,226,244,3,122,61,0,227,244,3,124,62,0,228,244,3,126,63,
        0,229,244,3,128,64,0,230,244,3,130,65,0,231,244,3,132,66,0,232,244,
        3,134,67,0,233,244,3,138,69,0,234,244,3,140,70,0,235,244,3,142,71,
        0,236,244,3,144,72,0,237,244,3,146,73,0,238,244,3,12,6,0,239,244,
        3,14,7,0,240,244,3,16,8,0,241,244,3,20,10,0,242,244,3,18,9,0,243,
        169,1,0,0,0,243,170,1,0,0,0,243,171,1,0,0,0,243,172,1,0,0,0,243,
        173,1,0,0,0,243,174,1,0,0,0,243,175,1,0,0,0,243,176,1,0,0,0,243,
        177,1,0,0,0,243,178,1,0,0,0,243,179,1,0,0,0,243,180,1,0,0,0,243,
        181,1,0,0,0,243,182,1,0,0,0,243,183,1,0,0,0,243,184,1,0,0,0,243,
        185,1,0,0,0,243,186,1,0,0,0,243,187,1,0,0,0,243,188,1,0,0,0,243,
        189,1,0,0,0,243,190,1,0,0,0,243,191,1,0,0,0,243,192,1,0,0,0,243,
        193,1,0,0,0,243,194,1,0,0,0,243,195,1,0,0,0,243,196,1,0,0,0,243,
        197,1,0,0,0,243,198,1,0,0,0,243,199,1,0,0,0,243,200,1,0,0,0,243,
        201,1,0,0,0,243,202,1,0,0,0,243,203,1,0,0,0,243,204,1,0,0,0,243,
        205,1,0,0,0,243,206,1,0,0,0,243,207,1,0,0,0,243,208,1,0,0,0,243,
        209,1,0,0,0,243,210,1,0,0,0,243,211,1,0,0,0,243,212,1,0,0,0,243,
        213,1,0,0,0,243,214,1,0,0,0,243,215,1,0,0,0,243,216,1,0,0,0,243,
        217,1,0,0,0,243,218,1,0,0,0,243,219,1,0,0,0,243,220,1,0,0,0,243,
        221,1,0,0,0,243,222,1,0,0,0,243,223,1,0,0,0,243,224,1,0,0,0,243,
        225,1,0,0,0,243,226,1,0,0,0,243,227,1,0,0,0,243,228,1,0,0,0,243,
        229,1,0,0,0,243,230,1,0,0,0,243,231,1,0,0,0,243,232,1,0,0,0,243,
        233,1,0,0,0,243,234,1,0,0,0,243,235,1,0,0,0,243,236,1,0,0,0,243,
        237,1,0,0,0,243,238,1,0,0,0,243,239,1,0,0,0,243,240,1,0,0,0,243,
        241,1,0,0,0,243,242,1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,
        246,1,0,0,0,246,248,1,0,0,0,247,245,1,0,0,0,248,249,5,77,0,0,249,
        5,1,0,0,0,250,254,7,0,0,0,251,255,5,93,0,0,252,255,5,94,0,0,253,
        255,3,6,3,0,254,251,1,0,0,0,254,252,1,0,0,0,254,253,1,0,0,0,255,
        260,1,0,0,0,256,261,5,93,0,0,257,261,5,94,0,0,258,261,3,6,3,0,259,
        261,3,4,2,0,260,256,1,0,0,0,260,257,1,0,0,0,260,258,1,0,0,0,260,
        259,1,0,0,0,261,262,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,
        7,1,0,0,0,264,269,7,1,0,0,265,270,5,93,0,0,266,270,5,94,0,0,267,
        270,3,6,3,0,268,270,3,8,4,0,269,265,1,0,0,0,269,266,1,0,0,0,269,
        267,1,0,0,0,269,268,1,0,0,0,270,277,1,0,0,0,271,276,5,93,0,0,272,
        276,5,94,0,0,273,276,3,6,3,0,274,276,3,8,4,0,275,271,1,0,0,0,275,
        272,1,0,0,0,275,273,1,0,0,0,275,274,1,0,0,0,276,278,1,0,0,0,277,
        275,1,0,0,0,278,279,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,
        9,1,0,0,0,281,285,5,76,0,0,282,284,7,2,0,0,283,282,1,0,0,0,284,287,
        1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,288,1,0,0,0,287,285,
        1,0,0,0,288,289,5,77,0,0,289,11,1,0,0,0,290,291,5,13,0,0,291,292,
        7,3,0,0,292,299,3,10,5,0,293,298,5,93,0,0,294,298,5,95,0,0,295,298,
        3,4,2,0,296,298,3,12,6,0,297,293,1,0,0,0,297,294,1,0,0,0,297,295,
        1,0,0,0,297,296,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,300,
        1,0,0,0,300,13,1,0,0,0,301,299,1,0,0,0,302,303,5,36,0,0,303,304,
        5,76,0,0,304,305,5,11,0,0,305,306,7,4,0,0,306,307,5,77,0,0,307,15,
        1,0,0,0,308,312,5,14,0,0,309,313,5,94,0,0,310,313,3,8,4,0,311,313,
        3,4,2,0,312,309,1,0,0,0,312,310,1,0,0,0,312,311,1,0,0,0,313,317,
        1,0,0,0,314,316,3,4,2,0,315,314,1,0,0,0,316,319,1,0,0,0,317,315,
        1,0,0,0,317,318,1,0,0,0,318,17,1,0,0,0,319,317,1,0,0,0,320,322,5,
        78,0,0,321,323,3,4,2,0,322,321,1,0,0,0,322,323,1,0,0,0,323,333,1,
        0,0,0,324,326,5,78,0,0,325,327,3,6,3,0,326,325,1,0,0,0,326,327,1,
        0,0,0,327,333,1,0,0,0,328,330,5,78,0,0,329,331,5,93,0,0,330,329,
        1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,320,1,0,0,0,332,324,
        1,0,0,0,332,328,1,0,0,0,333,19,1,0,0,0,334,335,5,38,0,0,335,336,
        7,5,0,0,336,338,5,95,0,0,337,339,5,92,0,0,338,337,1,0,0,0,338,339,
        1,0,0,0,339,21,1,0,0,0,340,341,5,6,0,0,341,342,5,95,0,0,342,23,1,
        0,0,0,343,348,5,4,0,0,344,349,5,95,0,0,345,349,3,4,2,0,346,347,5,
        78,0,0,347,349,3,4,2,0,348,344,1,0,0,0,348,345,1,0,0,0,348,346,1,
        0,0,0,349,25,1,0,0,0,350,351,5,5,0,0,351,352,5,95,0,0,352,27,1,0,
        0,0,353,354,5,7,0,0,354,356,5,94,0,0,355,357,3,4,2,0,356,355,1,0,
        0,0,356,357,1,0,0,0,357,29,1,0,0,0,358,359,5,8,0,0,359,360,5,94,
        0,0,360,361,3,4,2,0,361,31,1,0,0,0,362,368,5,15,0,0,363,364,5,76,
        0,0,364,365,3,4,2,0,365,366,3,4,2,0,366,367,5,77,0,0,367,369,1,0,
        0,0,368,363,1,0,0,0,369,370,1,0,0,0,370,368,1,0,0,0,370,371,1,0,
        0,0,371,33,1,0,0,0,372,376,5,16,0,0,373,375,3,4,2,0,374,373,1,0,
        0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,35,1,0,0,
        0,378,376,1,0,0,0,379,380,5,31,0,0,380,388,5,76,0,0,381,382,5,76,
        0,0,382,383,5,94,0,0,383,384,3,4,2,0,384,385,5,77,0,0,385,387,1,
        0,0,0,386,381,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,1,
        0,0,0,389,391,1,0,0,0,390,388,1,0,0,0,391,395,5,77,0,0,392,394,3,
        4,2,0,393,392,1,0,0,0,394,397,1,0,0,0,395,393,1,0,0,0,395,396,1,
        0,0,0,396,37,1,0,0,0,397,395,1,0,0,0,398,399,5,32,0,0,399,407,5,
        76,0,0,400,401,5,76,0,0,401,402,5,94,0,0,402,403,3,4,2,0,403,404,
        5,77,0,0,404,406,1,0,0,0,405,400,1,0,0,0,406,409,1,0,0,0,407,405,
        1,0,0,0,407,408,1,0,0,0,408,410,1,0,0,0,409,407,1,0,0,0,410,414,
        5,77,0,0,411,413,3,4,2,0,412,411,1,0,0,0,413,416,1,0,0,0,414,412,
        1,0,0,0,414,415,1,0,0,0,415,39,1,0,0,0,416,414,1,0,0,0,417,418,5,
        33,0,0,418,419,3,4,2,0,419,420,3,4,2,0,420,41,1,0,0,0,421,422,5,
        34,0,0,422,423,3,4,2,0,423,424,3,4,2,0,424,43,1,0,0,0,425,426,5,
        29,0,0,426,430,5,76,0,0,427,429,7,3,0,0,428,427,1,0,0,0,429,432,
        1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,430,
        1,0,0,0,433,435,5,77,0,0,434,436,3,4,2,0,435,434,1,0,0,0,436,437,
        1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,45,1,0,0,0,439,440,5,
        37,0,0,440,441,5,94,0,0,441,47,1,0,0,0,442,443,5,41,0,0,443,444,
        5,94,0,0,444,448,5,76,0,0,445,447,5,94,0,0,446,445,1,0,0,0,447,450,
        1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,451,1,0,0,0,450,448,
        1,0,0,0,451,455,5,77,0,0,452,454,3,4,2,0,453,452,1,0,0,0,454,457,
        1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,49,1,0,0,0,457,455,1,
        0,0,0,458,459,5,21,0,0,459,470,3,4,2,0,460,461,5,76,0,0,461,465,
        3,4,2,0,462,464,3,4,2,0,463,462,1,0,0,0,464,467,1,0,0,0,465,463,
        1,0,0,0,465,466,1,0,0,0,466,468,1,0,0,0,467,465,1,0,0,0,468,469,
        5,77,0,0,469,471,1,0,0,0,470,460,1,0,0,0,471,472,1,0,0,0,472,470,
        1,0,0,0,472,473,1,0,0,0,473,51,1,0,0,0,474,478,5,64,0,0,475,477,
        3,4,2,0,476,475,1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,479,
        1,0,0,0,479,53,1,0,0,0,480,478,1,0,0,0,481,482,5,23,0,0,482,483,
        5,94,0,0,483,484,3,4,2,0,484,55,1,0,0,0,485,486,5,24,0,0,486,490,
        5,94,0,0,487,489,3,4,2,0,488,487,1,0,0,0,489,492,1,0,0,0,490,488,
        1,0,0,0,490,491,1,0,0,0,491,57,1,0,0,0,492,490,1,0,0,0,493,494,5,
        67,0,0,494,495,5,76,0,0,495,496,5,94,0,0,496,497,3,4,2,0,497,501,
        5,77,0,0,498,500,3,4,2,0,499,498,1,0,0,0,500,503,1,0,0,0,501,499,
        1,0,0,0,501,502,1,0,0,0,502,59,1,0,0,0,503,501,1,0,0,0,504,505,5,
        68,0,0,505,506,5,76,0,0,506,507,5,94,0,0,507,508,3,4,2,0,508,512,
        5,77,0,0,509,511,3,4,2,0,510,509,1,0,0,0,511,514,1,0,0,0,512,510,
        1,0,0,0,512,513,1,0,0,0,513,61,1,0,0,0,514,512,1,0,0,0,515,516,5,
        69,0,0,516,517,5,76,0,0,517,518,5,94,0,0,518,519,3,4,2,0,519,523,
        5,77,0,0,520,522,3,4,2,0,521,520,1,0,0,0,522,525,1,0,0,0,523,521,
        1,0,0,0,523,524,1,0,0,0,524,63,1,0,0,0,525,523,1,0,0,0,526,527,5,
        70,0,0,527,528,5,76,0,0,528,529,5,94,0,0,529,530,3,4,2,0,530,534,
        5,77,0,0,531,533,3,4,2,0,532,531,1,0,0,0,533,536,1,0,0,0,534,532,
        1,0,0,0,534,535,1,0,0,0,535,65,1,0,0,0,536,534,1,0,0,0,537,538,5,
        71,0,0,538,539,5,76,0,0,539,540,5,94,0,0,540,541,3,4,2,0,541,545,
        5,77,0,0,542,544,3,4,2,0,543,542,1,0,0,0,544,547,1,0,0,0,545,543,
        1,0,0,0,545,546,1,0,0,0,546,67,1,0,0,0,547,545,1,0,0,0,548,549,5,
        72,0,0,549,550,5,76,0,0,550,551,5,93,0,0,551,555,5,77,0,0,552,554,
        3,4,2,0,553,552,1,0,0,0,554,557,1,0,0,0,555,553,1,0,0,0,555,556,
        1,0,0,0,556,69,1,0,0,0,557,555,1,0,0,0,558,559,5,9,0,0,559,560,3,
        4,2,0,560,71,1,0,0,0,561,562,5,12,0,0,562,563,3,4,2,0,563,73,1,0,
        0,0,564,568,5,20,0,0,565,567,3,4,2,0,566,565,1,0,0,0,567,570,1,0,
        0,0,568,566,1,0,0,0,568,569,1,0,0,0,569,75,1,0,0,0,570,568,1,0,0,
        0,571,572,5,19,0,0,572,573,3,4,2,0,573,77,1,0,0,0,574,578,5,18,0,
        0,575,577,3,4,2,0,576,575,1,0,0,0,577,580,1,0,0,0,578,576,1,0,0,
        0,578,579,1,0,0,0,579,79,1,0,0,0,580,578,1,0,0,0,581,585,5,17,0,
        0,582,584,3,4,2,0,583,582,1,0,0,0,584,587,1,0,0,0,585,583,1,0,0,
        0,585,586,1,0,0,0,586,81,1,0,0,0,587,585,1,0,0,0,588,589,5,27,0,
        0,589,593,5,76,0,0,590,592,5,94,0,0,591,590,1,0,0,0,592,595,1,0,
        0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,596,1,0,0,0,595,593,1,0,
        0,0,596,597,5,77,0,0,597,83,1,0,0,0,598,599,5,28,0,0,599,603,5,76,
        0,0,600,602,5,94,0,0,601,600,1,0,0,0,602,605,1,0,0,0,603,601,1,0,
        0,0,603,604,1,0,0,0,604,606,1,0,0,0,605,603,1,0,0,0,606,607,5,77,
        0,0,607,85,1,0,0,0,608,612,5,22,0,0,609,611,3,4,2,0,610,609,1,0,
        0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,87,1,0,0,
        0,614,612,1,0,0,0,615,616,5,47,0,0,616,619,7,6,0,0,617,620,5,95,
        0,0,618,620,3,4,2,0,619,617,1,0,0,0,619,618,1,0,0,0,620,89,1,0,0,
        0,621,622,5,46,0,0,622,623,5,94,0,0,623,624,3,4,2,0,624,91,1,0,0,
        0,625,626,5,45,0,0,626,627,5,94,0,0,627,631,5,76,0,0,628,630,5,94,
        0,0,629,628,1,0,0,0,630,633,1,0,0,0,631,629,1,0,0,0,631,632,1,0,
        0,0,632,634,1,0,0,0,633,631,1,0,0,0,634,638,5,77,0,0,635,637,3,4,
        2,0,636,635,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,1,0,
        0,0,639,93,1,0,0,0,640,638,1,0,0,0,641,642,5,44,0,0,642,643,5,94,
        0,0,643,650,5,76,0,0,644,646,5,94,0,0,645,647,3,4,2,0,646,645,1,
        0,0,0,646,647,1,0,0,0,647,649,1,0,0,0,648,644,1,0,0,0,649,652,1,
        0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,653,1,0,0,0,652,650,1,
        0,0,0,653,654,5,77,0,0,654,95,1,0,0,0,655,656,5,43,0,0,656,657,5,
        94,0,0,657,661,5,76,0,0,658,660,5,94,0,0,659,658,1,0,0,0,660,663,
        1,0,0,0,661,659,1,0,0,0,661,662,1,0,0,0,662,664,1,0,0,0,663,661,
        1,0,0,0,664,668,5,77,0,0,665,667,3,4,2,0,666,665,1,0,0,0,667,670,
        1,0,0,0,668,666,1,0,0,0,668,669,1,0,0,0,669,97,1,0,0,0,670,668,1,
        0,0,0,671,672,5,42,0,0,672,673,5,94,0,0,673,680,5,76,0,0,674,676,
        5,94,0,0,675,677,3,4,2,0,676,675,1,0,0,0,676,677,1,0,0,0,677,679,
        1,0,0,0,678,674,1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,
        1,0,0,0,681,683,1,0,0,0,682,680,1,0,0,0,683,684,5,77,0,0,684,99,
        1,0,0,0,685,686,5,37,0,0,686,687,5,94,0,0,687,101,1,0,0,0,688,692,
        5,52,0,0,689,691,3,4,2,0,690,689,1,0,0,0,691,694,1,0,0,0,692,690,
        1,0,0,0,692,693,1,0,0,0,693,103,1,0,0,0,694,692,1,0,0,0,695,699,
        5,51,0,0,696,698,3,4,2,0,697,696,1,0,0,0,698,701,1,0,0,0,699,697,
        1,0,0,0,699,700,1,0,0,0,700,105,1,0,0,0,701,699,1,0,0,0,702,703,
        5,50,0,0,703,707,5,76,0,0,704,706,7,3,0,0,705,704,1,0,0,0,706,709,
        1,0,0,0,707,705,1,0,0,0,707,708,1,0,0,0,708,710,1,0,0,0,709,707,
        1,0,0,0,710,711,5,77,0,0,711,107,1,0,0,0,712,713,5,66,0,0,713,714,
        5,94,0,0,714,715,3,4,2,0,715,109,1,0,0,0,716,721,5,65,0,0,717,718,
        5,76,0,0,718,719,5,94,0,0,719,720,5,94,0,0,720,722,5,77,0,0,721,
        717,1,0,0,0,722,723,1,0,0,0,723,721,1,0,0,0,723,724,1,0,0,0,724,
        111,1,0,0,0,725,726,5,63,0,0,726,734,5,76,0,0,727,728,5,76,0,0,728,
        729,5,94,0,0,729,730,3,4,2,0,730,731,5,77,0,0,731,733,1,0,0,0,732,
        727,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,
        737,1,0,0,0,736,734,1,0,0,0,737,741,5,77,0,0,738,740,3,4,2,0,739,
        738,1,0,0,0,740,743,1,0,0,0,741,739,1,0,0,0,741,742,1,0,0,0,742,
        113,1,0,0,0,743,741,1,0,0,0,744,749,5,36,0,0,745,746,5,76,0,0,746,
        747,5,94,0,0,747,748,5,94,0,0,748,750,5,77,0,0,749,745,1,0,0,0,750,
        751,1,0,0,0,751,749,1,0,0,0,751,752,1,0,0,0,752,115,1,0,0,0,753,
        754,5,35,0,0,754,755,5,94,0,0,755,117,1,0,0,0,756,757,5,61,0,0,757,
        760,5,76,0,0,758,759,5,94,0,0,759,761,3,4,2,0,760,758,1,0,0,0,761,
        762,1,0,0,0,762,760,1,0,0,0,762,763,1,0,0,0,763,764,1,0,0,0,764,
        768,5,77,0,0,765,767,3,4,2,0,766,765,1,0,0,0,767,770,1,0,0,0,768,
        766,1,0,0,0,768,769,1,0,0,0,769,119,1,0,0,0,770,768,1,0,0,0,771,
        772,5,60,0,0,772,775,5,76,0,0,773,774,5,94,0,0,774,776,3,4,2,0,775,
        773,1,0,0,0,776,777,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,
        779,1,0,0,0,779,783,5,77,0,0,780,782,3,4,2,0,781,780,1,0,0,0,782,
        785,1,0,0,0,783,781,1,0,0,0,783,784,1,0,0,0,784,121,1,0,0,0,785,
        783,1,0,0,0,786,787,5,59,0,0,787,790,5,76,0,0,788,789,5,94,0,0,789,
        791,3,4,2,0,790,788,1,0,0,0,791,792,1,0,0,0,792,790,1,0,0,0,792,
        793,1,0,0,0,793,794,1,0,0,0,794,798,5,77,0,0,795,797,3,4,2,0,796,
        795,1,0,0,0,797,800,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,0,799,
        123,1,0,0,0,800,798,1,0,0,0,801,802,5,58,0,0,802,805,5,76,0,0,803,
        804,5,94,0,0,804,806,3,4,2,0,805,803,1,0,0,0,806,807,1,0,0,0,807,
        805,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,813,5,77,0,0,810,
        812,3,4,2,0,811,810,1,0,0,0,812,815,1,0,0,0,813,811,1,0,0,0,813,
        814,1,0,0,0,814,125,1,0,0,0,815,813,1,0,0,0,816,817,5,57,0,0,817,
        821,5,76,0,0,818,820,5,94,0,0,819,818,1,0,0,0,820,823,1,0,0,0,821,
        819,1,0,0,0,821,822,1,0,0,0,822,824,1,0,0,0,823,821,1,0,0,0,824,
        828,5,77,0,0,825,827,3,4,2,0,826,825,1,0,0,0,827,830,1,0,0,0,828,
        826,1,0,0,0,828,829,1,0,0,0,829,127,1,0,0,0,830,828,1,0,0,0,831,
        832,5,56,0,0,832,836,5,76,0,0,833,835,5,94,0,0,834,833,1,0,0,0,835,
        838,1,0,0,0,836,834,1,0,0,0,836,837,1,0,0,0,837,839,1,0,0,0,838,
        836,1,0,0,0,839,843,5,77,0,0,840,842,3,4,2,0,841,840,1,0,0,0,842,
        845,1,0,0,0,843,841,1,0,0,0,843,844,1,0,0,0,844,129,1,0,0,0,845,
        843,1,0,0,0,846,847,5,55,0,0,847,848,5,94,0,0,848,849,5,94,0,0,849,
        131,1,0,0,0,850,851,5,54,0,0,851,859,5,94,0,0,852,853,5,76,0,0,853,
        854,5,94,0,0,854,855,3,4,2,0,855,856,5,77,0,0,856,858,1,0,0,0,857,
        852,1,0,0,0,858,861,1,0,0,0,859,857,1,0,0,0,859,860,1,0,0,0,860,
        133,1,0,0,0,861,859,1,0,0,0,862,863,5,53,0,0,863,871,5,94,0,0,864,
        865,5,76,0,0,865,866,5,94,0,0,866,867,3,4,2,0,867,868,5,77,0,0,868,
        870,1,0,0,0,869,864,1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,
        872,1,0,0,0,872,135,1,0,0,0,873,871,1,0,0,0,874,875,7,4,0,0,875,
        878,3,148,74,0,876,878,3,4,2,0,877,874,1,0,0,0,877,876,1,0,0,0,878,
        137,1,0,0,0,879,880,5,25,0,0,880,881,5,94,0,0,881,882,3,4,2,0,882,
        139,1,0,0,0,883,884,5,76,0,0,884,889,5,39,0,0,885,890,5,94,0,0,886,
        890,5,92,0,0,887,890,3,136,68,0,888,890,1,0,0,0,889,885,1,0,0,0,
        889,886,1,0,0,0,889,887,1,0,0,0,889,888,1,0,0,0,890,891,1,0,0,0,
        891,892,5,77,0,0,892,141,1,0,0,0,893,894,5,76,0,0,894,895,5,40,0,
        0,895,900,5,94,0,0,896,901,5,94,0,0,897,901,5,92,0,0,898,901,3,136,
        68,0,899,901,1,0,0,0,900,896,1,0,0,0,900,897,1,0,0,0,900,898,1,0,
        0,0,900,899,1,0,0,0,901,902,1,0,0,0,902,903,5,77,0,0,903,143,1,0,
        0,0,904,905,5,48,0,0,905,906,5,85,0,0,906,907,5,94,0,0,907,917,5,
        76,0,0,908,912,5,85,0,0,909,911,7,7,0,0,910,909,1,0,0,0,911,914,
        1,0,0,0,912,910,1,0,0,0,912,913,1,0,0,0,913,918,1,0,0,0,914,912,
        1,0,0,0,915,916,5,75,0,0,916,918,5,95,0,0,917,908,1,0,0,0,917,915,
        1,0,0,0,918,919,1,0,0,0,919,920,5,77,0,0,920,145,1,0,0,0,921,922,
        5,49,0,0,922,923,5,85,0,0,923,924,5,94,0,0,924,147,1,0,0,0,925,926,
        7,8,0,0,926,149,1,0,0,0,927,928,5,76,0,0,928,929,7,4,0,0,929,930,
        3,148,74,0,930,932,5,77,0,0,931,933,3,150,75,0,932,931,1,0,0,0,932,
        933,1,0,0,0,933,151,1,0,0,0,934,935,5,76,0,0,935,936,5,47,0,0,936,
        937,7,4,0,0,937,939,3,148,74,0,938,940,5,95,0,0,939,938,1,0,0,0,
        939,940,1,0,0,0,940,941,1,0,0,0,941,942,5,77,0,0,942,999,1,0,0,0,
        943,944,5,76,0,0,944,945,5,7,0,0,945,946,7,4,0,0,946,948,3,148,74,
        0,947,949,5,95,0,0,948,947,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,
        0,950,951,5,77,0,0,951,999,1,0,0,0,952,953,5,76,0,0,953,957,5,8,
        0,0,954,958,3,148,74,0,955,956,7,4,0,0,956,958,3,4,2,0,957,954,1,
        0,0,0,957,955,1,0,0,0,958,959,1,0,0,0,959,957,1,0,0,0,959,960,1,
        0,0,0,960,961,1,0,0,0,961,962,5,77,0,0,962,999,1,0,0,0,963,964,5,
        76,0,0,964,965,5,36,0,0,965,966,5,76,0,0,966,968,5,10,0,0,967,969,
        7,4,0,0,968,967,1,0,0,0,969,970,1,0,0,0,970,968,1,0,0,0,970,971,
        1,0,0,0,971,972,1,0,0,0,972,973,5,77,0,0,973,999,5,77,0,0,974,975,
        5,76,0,0,975,976,5,36,0,0,976,977,5,76,0,0,977,978,5,9,0,0,978,980,
        5,1,0,0,979,981,7,4,0,0,980,979,1,0,0,0,981,982,1,0,0,0,982,980,
        1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,985,5,77,0,0,985,999,
        5,77,0,0,986,987,5,76,0,0,987,993,5,36,0,0,988,989,5,76,0,0,989,
        990,5,9,0,0,990,991,5,1,0,0,991,992,7,4,0,0,992,994,5,77,0,0,993,
        988,1,0,0,0,994,995,1,0,0,0,995,993,1,0,0,0,995,996,1,0,0,0,996,
        997,1,0,0,0,997,999,5,77,0,0,998,934,1,0,0,0,998,943,1,0,0,0,998,
        952,1,0,0,0,998,963,1,0,0,0,998,974,1,0,0,0,998,986,1,0,0,0,999,
        153,1,0,0,0,1000,1001,5,31,0,0,1001,1002,5,76,0,0,1002,1003,3,150,
        75,0,1003,1004,5,77,0,0,1004,1040,1,0,0,0,1005,1006,5,32,0,0,1006,
        1007,5,76,0,0,1007,1008,3,150,75,0,1008,1009,5,77,0,0,1009,1040,
        1,0,0,0,1010,1015,5,8,0,0,1011,1016,3,148,74,0,1012,1016,5,94,0,
        0,1013,1014,5,92,0,0,1014,1016,3,4,2,0,1015,1011,1,0,0,0,1015,1012,
        1,0,0,0,1015,1013,1,0,0,0,1016,1017,1,0,0,0,1017,1015,1,0,0,0,1017,
        1018,1,0,0,0,1018,1040,1,0,0,0,1019,1020,5,36,0,0,1020,1021,5,76,
        0,0,1021,1022,5,9,0,0,1022,1024,5,1,0,0,1023,1025,7,4,0,0,1024,1023,
        1,0,0,0,1025,1026,1,0,0,0,1026,1024,1,0,0,0,1026,1027,1,0,0,0,1027,
        1028,1,0,0,0,1028,1040,5,77,0,0,1029,1035,5,36,0,0,1030,1031,5,76,
        0,0,1031,1032,5,9,0,0,1032,1033,5,1,0,0,1033,1034,7,4,0,0,1034,1036,
        5,77,0,0,1035,1030,1,0,0,0,1036,1037,1,0,0,0,1037,1035,1,0,0,0,1037,
        1038,1,0,0,0,1038,1040,1,0,0,0,1039,1000,1,0,0,0,1039,1005,1,0,0,
        0,1039,1010,1,0,0,0,1039,1019,1,0,0,0,1039,1029,1,0,0,0,1040,155,
        1,0,0,0,1041,1042,5,62,0,0,1042,1050,3,12,6,0,1043,1044,5,62,0,0,
        1044,1045,5,31,0,0,1045,1046,5,76,0,0,1046,1047,3,150,75,0,1047,
        1048,5,77,0,0,1048,1050,1,0,0,0,1049,1041,1,0,0,0,1049,1043,1,0,
        0,0,1050,157,1,0,0,0,98,159,166,243,245,254,260,262,269,275,279,
        285,297,299,312,317,322,326,330,332,338,348,356,370,376,388,395,
        407,414,430,437,448,455,465,472,478,490,501,512,523,534,545,555,
        568,578,585,593,603,612,619,631,638,646,650,661,668,676,680,692,
        699,707,723,734,741,751,762,768,777,783,792,798,807,813,821,828,
        836,843,859,871,877,889,900,912,917,932,939,948,957,959,970,982,
        995,998,1015,1017,1026,1037,1039,1049
    ]

class MyParser ( Parser ):

    grammarFileName = "MyParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "'t'", "'use'", "'write'", 
                     "'write-line'", "'print'", "'defvar'", "'setq'", "'type'", 
                     "'special'", "'inline'", "'type-of'", "'defun'", "'if'", 
                     "'cond'", "'loop'", "'and'", "'or'", "'not'", "'class'", 
                     "'case'", "'do'", "'throw'", "'catch'", "'block'", 
                     "'import_from'", "'import'", "'export'", "'lambda'", 
                     "'nil'", "'let'", "'let*'", "'unless'", "'when'", "'go'", 
                     "'declare'", "'function'", "'format'", "'return'", 
                     "'return-from'", "'defmacro'", "'defclass'", "'defmethod'", 
                     "'defstruct'", "'defgeneric'", "'defconstant'", "'defparameter'", 
                     "'defpackage'", "'in-package'", "'use-package'", "'values'", 
                     "'progn'", "'make-instance'", "'initialize-instance'", 
                     "'slot-value'", "'with-slots'", "'with-accessors'", 
                     "'restart-case'", "'handler-case'", "'restart-bind'", 
                     "'handler-bind'", "'letf'", "'letrec'", "'tagbody'", 
                     "'declaim'", "'deftype'", "'with-open-file'", "'with-output-to-file'", 
                     "'with-input-from-string'", "'with-output-to-string'", 
                     "'with-stream'", "'with-timeout'", "'shadow'", "'nicknames'", 
                     "'documentation'", "'('", "')'", "'''", "'\"'", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "':'", "'='", "'/='", "'<'", 
                     "'<='", "'>'", "'>='" ]

    symbolicNames = [ "<INVALID>", "DATATYPES", "T", "USE", "WRITE", "WRITE_LINE", 
                      "PRINT", "DEFVAR", "SETQ", "TYPE", "SPECIAL", "INLINE", 
                      "TYPE_OF", "DEFUN", "IF", "COND", "LOOP", "AND", "OR", 
                      "NOT", "CLASS", "CASE", "DO", "THROW", "CATCH", "BLOCK", 
                      "IMPORT_FROM", "IMPORT", "EXPORT", "LAMBDA", "NIL", 
                      "LET", "LET_STAR", "UNLESS", "WHEN", "GO", "DECLARE", 
                      "FUNCTION", "FORMAT", "RETURN", "RETURN_FROM", "DEFMACRO", 
                      "DEFCLASS", "DEFMETHOD", "DEFSTRUCT", "DEFGENERIC", 
                      "DEFCONSTANT", "DEFPARAMETER", "DEFPACKAGE", "IN_PACKAGE", 
                      "USE_PACKAGE", "VALUES", "PROGN", "MAKE_INSTANCE", 
                      "INITIALIZE_INSTANCE", "SLOT_VALUE", "WITH_SLOTS", 
                      "WITH_ACCESSORS", "RESTART_CASE", "HANDLER_CASE", 
                      "RESTART_BIND", "HANDLER_BIND", "LETF", "LETREC", 
                      "TAGBODY", "DECLAIM", "DEFTYPE", "WITH_OPEN_FILE", 
                      "WITH_OUTPUT_TO_FILE", "WITH_INPUT_FROM_STRING", "WITH_OUTPUT_TO_STRING", 
                      "WITH_STREAM", "WITH_TIMEOUT", "SHADOW", "NICKNAMES", 
                      "DOCUMENTATION", "LPAREN", "RPAREN", "SQ", "DQ", "PLUS", 
                      "MINUS", "MULT", "DIV", "PERC", "COLON", "EQUALS", 
                      "NOT_EQUALS", "LESS_THAN", "LESS_OR_EQUAL_THAN", "GREATER_THAN", 
                      "GREATER_OR_EQUAL_THAN", "VAR", "ATOM", "SYMBOL", 
                      "STRING", "INT", "COMMENT", "MULTIPLE_COMMENT", "WS" ]

    RULE_prog = 0
    RULE_lists = 1
    RULE_list = 2
    RULE_equation = 3
    RULE_conditional_equation = 4
    RULE_function_arguments = 5
    RULE_define_function = 6
    RULE_inline_function = 7
    RULE_if_condition = 8
    RULE_literal = 9
    RULE_format_block = 10
    RULE_print_block = 11
    RULE_write_block = 12
    RULE_write_line_block = 13
    RULE_defvar_block = 14
    RULE_setq_block = 15
    RULE_cond_block = 16
    RULE_loop_block = 17
    RULE_let_block = 18
    RULE_let_star_block = 19
    RULE_unless_block = 20
    RULE_when_block = 21
    RULE_lambda_block = 22
    RULE_function_block = 23
    RULE_defmacro_block = 24
    RULE_case_block = 25
    RULE_tagbody_block = 26
    RULE_throw_block = 27
    RULE_catch_block = 28
    RULE_with_open_file_block = 29
    RULE_with_output_to_file_block = 30
    RULE_with_input_from_string_block = 31
    RULE_with_output_to_string_block = 32
    RULE_with_stream_block = 33
    RULE_with_timeout_block = 34
    RULE_type_block = 35
    RULE_type_of_block = 36
    RULE_class_block = 37
    RULE_not_block = 38
    RULE_or_block = 39
    RULE_and_block = 40
    RULE_import_block = 41
    RULE_export_block = 42
    RULE_do_block = 43
    RULE_defparameter_block = 44
    RULE_defconstant_block = 45
    RULE_defgeneric_block = 46
    RULE_defstruct_block = 47
    RULE_defmethod_block = 48
    RULE_defclass_block = 49
    RULE_fuction_block = 50
    RULE_progn_block = 51
    RULE_valus_block = 52
    RULE_use_package_block = 53
    RULE_deftype_block = 54
    RULE_declaim_block = 55
    RULE_letrec_blokc = 56
    RULE_declare_block = 57
    RULE_go_block = 58
    RULE_handler_bind_block = 59
    RULE_restart_bind_block = 60
    RULE_handler_case_block = 61
    RULE_restart_case_block = 62
    RULE_with_accessors_block = 63
    RULE_with_slots_block = 64
    RULE_slot_value_block = 65
    RULE_initialize_instance_block = 66
    RULE_make_instance_block = 67
    RULE_function_call = 68
    RULE_block_block = 69
    RULE_return_block = 70
    RULE_return_from_block = 71
    RULE_defpackage_block = 72
    RULE_in_package_block = 73
    RULE_value = 74
    RULE_binding_list = 75
    RULE_global_variable = 76
    RULE_local_variable = 77
    RULE_redefine = 78

    ruleNames =  [ "prog", "lists", "list", "equation", "conditional_equation", 
                   "function_arguments", "define_function", "inline_function", 
                   "if_condition", "literal", "format_block", "print_block", 
                   "write_block", "write_line_block", "defvar_block", "setq_block", 
                   "cond_block", "loop_block", "let_block", "let_star_block", 
                   "unless_block", "when_block", "lambda_block", "function_block", 
                   "defmacro_block", "case_block", "tagbody_block", "throw_block", 
                   "catch_block", "with_open_file_block", "with_output_to_file_block", 
                   "with_input_from_string_block", "with_output_to_string_block", 
                   "with_stream_block", "with_timeout_block", "type_block", 
                   "type_of_block", "class_block", "not_block", "or_block", 
                   "and_block", "import_block", "export_block", "do_block", 
                   "defparameter_block", "defconstant_block", "defgeneric_block", 
                   "defstruct_block", "defmethod_block", "defclass_block", 
                   "fuction_block", "progn_block", "valus_block", "use_package_block", 
                   "deftype_block", "declaim_block", "letrec_blokc", "declare_block", 
                   "go_block", "handler_bind_block", "restart_bind_block", 
                   "handler_case_block", "restart_case_block", "with_accessors_block", 
                   "with_slots_block", "slot_value_block", "initialize_instance_block", 
                   "make_instance_block", "function_call", "block_block", 
                   "return_block", "return_from_block", "defpackage_block", 
                   "in_package_block", "value", "binding_list", "global_variable", 
                   "local_variable", "redefine" ]

    EOF = Token.EOF
    DATATYPES=1
    T=2
    USE=3
    WRITE=4
    WRITE_LINE=5
    PRINT=6
    DEFVAR=7
    SETQ=8
    TYPE=9
    SPECIAL=10
    INLINE=11
    TYPE_OF=12
    DEFUN=13
    IF=14
    COND=15
    LOOP=16
    AND=17
    OR=18
    NOT=19
    CLASS=20
    CASE=21
    DO=22
    THROW=23
    CATCH=24
    BLOCK=25
    IMPORT_FROM=26
    IMPORT=27
    EXPORT=28
    LAMBDA=29
    NIL=30
    LET=31
    LET_STAR=32
    UNLESS=33
    WHEN=34
    GO=35
    DECLARE=36
    FUNCTION=37
    FORMAT=38
    RETURN=39
    RETURN_FROM=40
    DEFMACRO=41
    DEFCLASS=42
    DEFMETHOD=43
    DEFSTRUCT=44
    DEFGENERIC=45
    DEFCONSTANT=46
    DEFPARAMETER=47
    DEFPACKAGE=48
    IN_PACKAGE=49
    USE_PACKAGE=50
    VALUES=51
    PROGN=52
    MAKE_INSTANCE=53
    INITIALIZE_INSTANCE=54
    SLOT_VALUE=55
    WITH_SLOTS=56
    WITH_ACCESSORS=57
    RESTART_CASE=58
    HANDLER_CASE=59
    RESTART_BIND=60
    HANDLER_BIND=61
    LETF=62
    LETREC=63
    TAGBODY=64
    DECLAIM=65
    DEFTYPE=66
    WITH_OPEN_FILE=67
    WITH_OUTPUT_TO_FILE=68
    WITH_INPUT_FROM_STRING=69
    WITH_OUTPUT_TO_STRING=70
    WITH_STREAM=71
    WITH_TIMEOUT=72
    SHADOW=73
    NICKNAMES=74
    DOCUMENTATION=75
    LPAREN=76
    RPAREN=77
    SQ=78
    DQ=79
    PLUS=80
    MINUS=81
    MULT=82
    DIV=83
    PERC=84
    COLON=85
    EQUALS=86
    NOT_EQUALS=87
    LESS_THAN=88
    LESS_OR_EQUAL_THAN=89
    GREATER_THAN=90
    GREATER_OR_EQUAL_THAN=91
    VAR=92
    ATOM=93
    SYMBOL=94
    STRING=95
    INT=96
    COMMENT=97
    MULTIPLE_COMMENT=98
    WS=99

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MyParser.EOF, 0)

        def lists(self):
            return self.getTypedRuleContext(MyParser.ListsContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_prog

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProg" ):
                return visitor.visitProg(self)
            else:
                return visitor.visitChildren(self)




    def prog(self):

        localctx = MyParser.ProgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_prog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 158
                self.lists()


            self.state = 161
            self.match(MyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_lists

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLists" ):
                return visitor.visitLists(self)
            else:
                return visitor.visitChildren(self)




    def lists(self):

        localctx = MyParser.ListsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_lists)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 164 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 163
                self.list_()
                self.state = 166 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==76):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def VAR(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.VAR)
            else:
                return self.getToken(MyParser.VAR, i)

        def ATOM(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.ATOM)
            else:
                return self.getToken(MyParser.ATOM, i)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.STRING)
            else:
                return self.getToken(MyParser.STRING, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.EquationContext)
            else:
                return self.getTypedRuleContext(MyParser.EquationContext,i)


        def conditional_equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Conditional_equationContext)
            else:
                return self.getTypedRuleContext(MyParser.Conditional_equationContext,i)


        def print_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Print_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Print_blockContext,i)


        def write_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Write_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Write_blockContext,i)


        def write_line_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Write_line_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Write_line_blockContext,i)


        def defvar_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Defvar_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Defvar_blockContext,i)


        def setq_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Setq_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Setq_blockContext,i)


        def cond_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Cond_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Cond_blockContext,i)


        def loop_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Loop_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Loop_blockContext,i)


        def let_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Let_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Let_blockContext,i)


        def let_star_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Let_star_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Let_star_blockContext,i)


        def unless_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Unless_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Unless_blockContext,i)


        def when_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.When_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.When_blockContext,i)


        def lambda_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Lambda_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Lambda_blockContext,i)


        def function_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Function_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Function_blockContext,i)


        def defmacro_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Defmacro_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Defmacro_blockContext,i)


        def case_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Case_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Case_blockContext,i)


        def tagbody_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Tagbody_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Tagbody_blockContext,i)


        def throw_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Throw_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Throw_blockContext,i)


        def catch_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Catch_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Catch_blockContext,i)


        def with_open_file_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.With_open_file_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.With_open_file_blockContext,i)


        def with_output_to_file_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.With_output_to_file_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.With_output_to_file_blockContext,i)


        def with_input_from_string_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.With_input_from_string_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.With_input_from_string_blockContext,i)


        def with_output_to_string_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.With_output_to_string_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.With_output_to_string_blockContext,i)


        def with_stream_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.With_stream_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.With_stream_blockContext,i)


        def with_timeout_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.With_timeout_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.With_timeout_blockContext,i)


        def type_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Type_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Type_blockContext,i)


        def type_of_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Type_of_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Type_of_blockContext,i)


        def class_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Class_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Class_blockContext,i)


        def not_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Not_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Not_blockContext,i)


        def or_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Or_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Or_blockContext,i)


        def and_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.And_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.And_blockContext,i)


        def import_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Import_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Import_blockContext,i)


        def export_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Export_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Export_blockContext,i)


        def do_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Do_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Do_blockContext,i)


        def defparameter_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Defparameter_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Defparameter_blockContext,i)


        def defconstant_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Defconstant_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Defconstant_blockContext,i)


        def defgeneric_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Defgeneric_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Defgeneric_blockContext,i)


        def defstruct_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Defstruct_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Defstruct_blockContext,i)


        def defmethod_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Defmethod_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Defmethod_blockContext,i)


        def defclass_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Defclass_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Defclass_blockContext,i)


        def fuction_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Fuction_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Fuction_blockContext,i)


        def progn_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Progn_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Progn_blockContext,i)


        def valus_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Valus_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Valus_blockContext,i)


        def use_package_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Use_package_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Use_package_blockContext,i)


        def deftype_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Deftype_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Deftype_blockContext,i)


        def declaim_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Declaim_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Declaim_blockContext,i)


        def letrec_blokc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Letrec_blokcContext)
            else:
                return self.getTypedRuleContext(MyParser.Letrec_blokcContext,i)


        def declare_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Declare_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Declare_blockContext,i)


        def go_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Go_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Go_blockContext,i)


        def handler_bind_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Handler_bind_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Handler_bind_blockContext,i)


        def restart_bind_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Restart_bind_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Restart_bind_blockContext,i)


        def handler_case_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Handler_case_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Handler_case_blockContext,i)


        def restart_case_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Restart_case_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Restart_case_blockContext,i)


        def with_accessors_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.With_accessors_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.With_accessors_blockContext,i)


        def with_slots_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.With_slots_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.With_slots_blockContext,i)


        def slot_value_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Slot_value_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Slot_value_blockContext,i)


        def initialize_instance_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Initialize_instance_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Initialize_instance_blockContext,i)


        def make_instance_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Make_instance_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Make_instance_blockContext,i)


        def block_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Block_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Block_blockContext,i)


        def return_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Return_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Return_blockContext,i)


        def return_from_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Return_from_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Return_from_blockContext,i)


        def defpackage_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Defpackage_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Defpackage_blockContext,i)


        def in_package_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.In_package_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.In_package_blockContext,i)


        def define_function(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Define_functionContext)
            else:
                return self.getTypedRuleContext(MyParser.Define_functionContext,i)


        def inline_function(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Inline_functionContext)
            else:
                return self.getTypedRuleContext(MyParser.Inline_functionContext,i)


        def if_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.If_conditionContext)
            else:
                return self.getTypedRuleContext(MyParser.If_conditionContext,i)


        def format_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Format_blockContext)
            else:
                return self.getTypedRuleContext(MyParser.Format_blockContext,i)


        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.LiteralContext)
            else:
                return self.getTypedRuleContext(MyParser.LiteralContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list_(self):

        localctx = MyParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 168
            self.match(MyParser.LPAREN)
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611687668835683344) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4292825599) != 0):
                self.state = 243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 169
                    self.match(MyParser.VAR)
                    pass

                elif la_ == 2:
                    self.state = 170
                    self.match(MyParser.ATOM)
                    pass

                elif la_ == 3:
                    self.state = 171
                    self.match(MyParser.SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 172
                    self.match(MyParser.STRING)
                    pass

                elif la_ == 5:
                    self.state = 173
                    self.list_()
                    pass

                elif la_ == 6:
                    self.state = 174
                    self.equation()
                    pass

                elif la_ == 7:
                    self.state = 175
                    self.conditional_equation()
                    pass

                elif la_ == 8:
                    self.state = 176
                    self.print_block()
                    pass

                elif la_ == 9:
                    self.state = 177
                    self.write_block()
                    pass

                elif la_ == 10:
                    self.state = 178
                    self.write_line_block()
                    pass

                elif la_ == 11:
                    self.state = 179
                    self.defvar_block()
                    pass

                elif la_ == 12:
                    self.state = 180
                    self.setq_block()
                    pass

                elif la_ == 13:
                    self.state = 181
                    self.cond_block()
                    pass

                elif la_ == 14:
                    self.state = 182
                    self.loop_block()
                    pass

                elif la_ == 15:
                    self.state = 183
                    self.let_block()
                    pass

                elif la_ == 16:
                    self.state = 184
                    self.let_star_block()
                    pass

                elif la_ == 17:
                    self.state = 185
                    self.unless_block()
                    pass

                elif la_ == 18:
                    self.state = 186
                    self.when_block()
                    pass

                elif la_ == 19:
                    self.state = 187
                    self.lambda_block()
                    pass

                elif la_ == 20:
                    self.state = 188
                    self.function_block()
                    pass

                elif la_ == 21:
                    self.state = 189
                    self.defmacro_block()
                    pass

                elif la_ == 22:
                    self.state = 190
                    self.case_block()
                    pass

                elif la_ == 23:
                    self.state = 191
                    self.tagbody_block()
                    pass

                elif la_ == 24:
                    self.state = 192
                    self.throw_block()
                    pass

                elif la_ == 25:
                    self.state = 193
                    self.catch_block()
                    pass

                elif la_ == 26:
                    self.state = 194
                    self.with_open_file_block()
                    pass

                elif la_ == 27:
                    self.state = 195
                    self.with_output_to_file_block()
                    pass

                elif la_ == 28:
                    self.state = 196
                    self.with_input_from_string_block()
                    pass

                elif la_ == 29:
                    self.state = 197
                    self.with_output_to_string_block()
                    pass

                elif la_ == 30:
                    self.state = 198
                    self.with_stream_block()
                    pass

                elif la_ == 31:
                    self.state = 199
                    self.with_timeout_block()
                    pass

                elif la_ == 32:
                    self.state = 200
                    self.type_block()
                    pass

                elif la_ == 33:
                    self.state = 201
                    self.type_of_block()
                    pass

                elif la_ == 34:
                    self.state = 202
                    self.class_block()
                    pass

                elif la_ == 35:
                    self.state = 203
                    self.not_block()
                    pass

                elif la_ == 36:
                    self.state = 204
                    self.or_block()
                    pass

                elif la_ == 37:
                    self.state = 205
                    self.and_block()
                    pass

                elif la_ == 38:
                    self.state = 206
                    self.import_block()
                    pass

                elif la_ == 39:
                    self.state = 207
                    self.export_block()
                    pass

                elif la_ == 40:
                    self.state = 208
                    self.do_block()
                    pass

                elif la_ == 41:
                    self.state = 209
                    self.defparameter_block()
                    pass

                elif la_ == 42:
                    self.state = 210
                    self.defconstant_block()
                    pass

                elif la_ == 43:
                    self.state = 211
                    self.defgeneric_block()
                    pass

                elif la_ == 44:
                    self.state = 212
                    self.defstruct_block()
                    pass

                elif la_ == 45:
                    self.state = 213
                    self.defmethod_block()
                    pass

                elif la_ == 46:
                    self.state = 214
                    self.defclass_block()
                    pass

                elif la_ == 47:
                    self.state = 215
                    self.fuction_block()
                    pass

                elif la_ == 48:
                    self.state = 216
                    self.progn_block()
                    pass

                elif la_ == 49:
                    self.state = 217
                    self.valus_block()
                    pass

                elif la_ == 50:
                    self.state = 218
                    self.use_package_block()
                    pass

                elif la_ == 51:
                    self.state = 219
                    self.deftype_block()
                    pass

                elif la_ == 52:
                    self.state = 220
                    self.declaim_block()
                    pass

                elif la_ == 53:
                    self.state = 221
                    self.letrec_blokc()
                    pass

                elif la_ == 54:
                    self.state = 222
                    self.declare_block()
                    pass

                elif la_ == 55:
                    self.state = 223
                    self.go_block()
                    pass

                elif la_ == 56:
                    self.state = 224
                    self.handler_bind_block()
                    pass

                elif la_ == 57:
                    self.state = 225
                    self.restart_bind_block()
                    pass

                elif la_ == 58:
                    self.state = 226
                    self.handler_case_block()
                    pass

                elif la_ == 59:
                    self.state = 227
                    self.restart_case_block()
                    pass

                elif la_ == 60:
                    self.state = 228
                    self.with_accessors_block()
                    pass

                elif la_ == 61:
                    self.state = 229
                    self.with_slots_block()
                    pass

                elif la_ == 62:
                    self.state = 230
                    self.slot_value_block()
                    pass

                elif la_ == 63:
                    self.state = 231
                    self.initialize_instance_block()
                    pass

                elif la_ == 64:
                    self.state = 232
                    self.make_instance_block()
                    pass

                elif la_ == 65:
                    self.state = 233
                    self.block_block()
                    pass

                elif la_ == 66:
                    self.state = 234
                    self.return_block()
                    pass

                elif la_ == 67:
                    self.state = 235
                    self.return_from_block()
                    pass

                elif la_ == 68:
                    self.state = 236
                    self.defpackage_block()
                    pass

                elif la_ == 69:
                    self.state = 237
                    self.in_package_block()
                    pass

                elif la_ == 70:
                    self.state = 238
                    self.define_function()
                    pass

                elif la_ == 71:
                    self.state = 239
                    self.inline_function()
                    pass

                elif la_ == 72:
                    self.state = 240
                    self.if_condition()
                    pass

                elif la_ == 73:
                    self.state = 241
                    self.format_block()
                    pass

                elif la_ == 74:
                    self.state = 242
                    self.literal()
                    pass


                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 248
            self.match(MyParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EquationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(MyParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MyParser.MINUS, 0)

        def MULT(self):
            return self.getToken(MyParser.MULT, 0)

        def DIV(self):
            return self.getToken(MyParser.DIV, 0)

        def PERC(self):
            return self.getToken(MyParser.PERC, 0)

        def ATOM(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.ATOM)
            else:
                return self.getToken(MyParser.ATOM, i)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.EquationContext)
            else:
                return self.getTypedRuleContext(MyParser.EquationContext,i)


        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_equation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEquation" ):
                return visitor.visitEquation(self)
            else:
                return visitor.visitChildren(self)




    def equation(self):

        localctx = MyParser.EquationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_equation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            _la = self._input.LA(1)
            if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 254
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.state = 251
                self.match(MyParser.ATOM)
                pass
            elif token in [94]:
                self.state = 252
                self.match(MyParser.SYMBOL)
                pass
            elif token in [80, 81, 82, 83, 84]:
                self.state = 253
                self.equation()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 260 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 260
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [93]:
                        self.state = 256
                        self.match(MyParser.ATOM)
                        pass
                    elif token in [94]:
                        self.state = 257
                        self.match(MyParser.SYMBOL)
                        pass
                    elif token in [80, 81, 82, 83, 84]:
                        self.state = 258
                        self.equation()
                        pass
                    elif token in [76]:
                        self.state = 259
                        self.list_()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 262 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_equationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(MyParser.EQUALS, 0)

        def NOT_EQUALS(self):
            return self.getToken(MyParser.NOT_EQUALS, 0)

        def GREATER_THAN(self):
            return self.getToken(MyParser.GREATER_THAN, 0)

        def GREATER_OR_EQUAL_THAN(self):
            return self.getToken(MyParser.GREATER_OR_EQUAL_THAN, 0)

        def LESS_THAN(self):
            return self.getToken(MyParser.LESS_THAN, 0)

        def LESS_OR_EQUAL_THAN(self):
            return self.getToken(MyParser.LESS_OR_EQUAL_THAN, 0)

        def ATOM(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.ATOM)
            else:
                return self.getToken(MyParser.ATOM, i)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.EquationContext)
            else:
                return self.getTypedRuleContext(MyParser.EquationContext,i)


        def conditional_equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Conditional_equationContext)
            else:
                return self.getTypedRuleContext(MyParser.Conditional_equationContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_conditional_equation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_equation" ):
                return visitor.visitConditional_equation(self)
            else:
                return visitor.visitChildren(self)




    def conditional_equation(self):

        localctx = MyParser.Conditional_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_conditional_equation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            _la = self._input.LA(1)
            if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.state = 265
                self.match(MyParser.ATOM)
                pass
            elif token in [94]:
                self.state = 266
                self.match(MyParser.SYMBOL)
                pass
            elif token in [80, 81, 82, 83, 84]:
                self.state = 267
                self.equation()
                pass
            elif token in [86, 87, 88, 89, 90, 91]:
                self.state = 268
                self.conditional_equation()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 277 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 275
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [93]:
                        self.state = 271
                        self.match(MyParser.ATOM)
                        pass
                    elif token in [94]:
                        self.state = 272
                        self.match(MyParser.SYMBOL)
                        pass
                    elif token in [80, 81, 82, 83, 84]:
                        self.state = 273
                        self.equation()
                        pass
                    elif token in [86, 87, 88, 89, 90, 91]:
                        self.state = 274
                        self.conditional_equation()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 279 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def ATOM(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.ATOM)
            else:
                return self.getToken(MyParser.ATOM, i)

        def VAR(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.VAR)
            else:
                return self.getToken(MyParser.VAR, i)

        def getRuleIndex(self):
            return MyParser.RULE_function_arguments

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_arguments" ):
                return visitor.visitFunction_arguments(self)
            else:
                return visitor.visitChildren(self)




    def function_arguments(self):

        localctx = MyParser.Function_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_function_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.match(MyParser.LPAREN)
            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==92 or _la==93:
                self.state = 282
                _la = self._input.LA(1)
                if not(_la==92 or _la==93):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 288
            self.match(MyParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Define_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFUN(self):
            return self.getToken(MyParser.DEFUN, 0)

        def function_arguments(self):
            return self.getTypedRuleContext(MyParser.Function_argumentsContext,0)


        def ATOM(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.ATOM)
            else:
                return self.getToken(MyParser.ATOM, i)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.STRING)
            else:
                return self.getToken(MyParser.STRING, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def define_function(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.Define_functionContext)
            else:
                return self.getTypedRuleContext(MyParser.Define_functionContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_define_function

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefine_function" ):
                return visitor.visitDefine_function(self)
            else:
                return visitor.visitChildren(self)




    def define_function(self):

        localctx = MyParser.Define_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_define_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(MyParser.DEFUN)
            self.state = 291
            _la = self._input.LA(1)
            if not(_la==93 or _la==94):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 292
            self.function_arguments()
            self.state = 299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 297
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [93]:
                        self.state = 293
                        self.match(MyParser.ATOM)
                        pass
                    elif token in [95]:
                        self.state = 294
                        self.match(MyParser.STRING)
                        pass
                    elif token in [76]:
                        self.state = 295
                        self.list_()
                        pass
                    elif token in [13]:
                        self.state = 296
                        self.define_function()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(MyParser.DECLARE, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def INLINE(self):
            return self.getToken(MyParser.INLINE, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def VAR(self):
            return self.getToken(MyParser.VAR, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def getRuleIndex(self):
            return MyParser.RULE_inline_function

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInline_function" ):
                return visitor.visitInline_function(self)
            else:
                return visitor.visitChildren(self)




    def inline_function(self):

        localctx = MyParser.Inline_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_inline_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.match(MyParser.DECLARE)
            self.state = 303
            self.match(MyParser.LPAREN)
            self.state = 304
            self.match(MyParser.INLINE)
            self.state = 305
            _la = self._input.LA(1)
            if not(_la==92 or _la==94):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 306
            self.match(MyParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MyParser.IF, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def conditional_equation(self):
            return self.getTypedRuleContext(MyParser.Conditional_equationContext,0)


        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_if_condition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_condition" ):
                return visitor.visitIf_condition(self)
            else:
                return visitor.visitChildren(self)




    def if_condition(self):

        localctx = MyParser.If_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_if_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(MyParser.IF)
            self.state = 312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.state = 309
                self.match(MyParser.SYMBOL)
                pass
            elif token in [86, 87, 88, 89, 90, 91]:
                self.state = 310
                self.conditional_equation()
                pass
            elif token in [76]:
                self.state = 311
                self.list_()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 317
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 314
                    self.list_() 
                self.state = 319
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQ(self):
            return self.getToken(MyParser.SQ, 0)

        def list_(self):
            return self.getTypedRuleContext(MyParser.ListContext,0)


        def equation(self):
            return self.getTypedRuleContext(MyParser.EquationContext,0)


        def ATOM(self):
            return self.getToken(MyParser.ATOM, 0)

        def getRuleIndex(self):
            return MyParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = MyParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_literal)
        try:
            self.state = 332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 320
                self.match(MyParser.SQ)
                self.state = 322
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 321
                    self.list_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 324
                self.match(MyParser.SQ)
                self.state = 326
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 325
                    self.equation()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 328
                self.match(MyParser.SQ)
                self.state = 330
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 329
                    self.match(MyParser.ATOM)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT(self):
            return self.getToken(MyParser.FORMAT, 0)

        def STRING(self):
            return self.getToken(MyParser.STRING, 0)

        def T(self):
            return self.getToken(MyParser.T, 0)

        def NIL(self):
            return self.getToken(MyParser.NIL, 0)

        def VAR(self):
            return self.getToken(MyParser.VAR, 0)

        def getRuleIndex(self):
            return MyParser.RULE_format_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormat_block" ):
                return visitor.visitFormat_block(self)
            else:
                return visitor.visitChildren(self)




    def format_block(self):

        localctx = MyParser.Format_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_format_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.match(MyParser.FORMAT)
            self.state = 335
            _la = self._input.LA(1)
            if not(_la==2 or _la==30):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 336
            self.match(MyParser.STRING)
            self.state = 338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 337
                self.match(MyParser.VAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(MyParser.PRINT, 0)

        def STRING(self):
            return self.getToken(MyParser.STRING, 0)

        def getRuleIndex(self):
            return MyParser.RULE_print_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_block" ):
                return visitor.visitPrint_block(self)
            else:
                return visitor.visitChildren(self)




    def print_block(self):

        localctx = MyParser.Print_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_print_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(MyParser.PRINT)
            self.state = 341
            self.match(MyParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(MyParser.WRITE, 0)

        def STRING(self):
            return self.getToken(MyParser.STRING, 0)

        def list_(self):
            return self.getTypedRuleContext(MyParser.ListContext,0)


        def SQ(self):
            return self.getToken(MyParser.SQ, 0)

        def getRuleIndex(self):
            return MyParser.RULE_write_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWrite_block" ):
                return visitor.visitWrite_block(self)
            else:
                return visitor.visitChildren(self)




    def write_block(self):

        localctx = MyParser.Write_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_write_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.match(MyParser.WRITE)
            self.state = 348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [95]:
                self.state = 344
                self.match(MyParser.STRING)
                pass
            elif token in [76]:
                self.state = 345
                self.list_()
                pass
            elif token in [78]:
                self.state = 346
                self.match(MyParser.SQ)
                self.state = 347
                self.list_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_line_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE_LINE(self):
            return self.getToken(MyParser.WRITE_LINE, 0)

        def STRING(self):
            return self.getToken(MyParser.STRING, 0)

        def getRuleIndex(self):
            return MyParser.RULE_write_line_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWrite_line_block" ):
                return visitor.visitWrite_line_block(self)
            else:
                return visitor.visitChildren(self)




    def write_line_block(self):

        localctx = MyParser.Write_line_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_write_line_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.match(MyParser.WRITE_LINE)
            self.state = 351
            self.match(MyParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defvar_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFVAR(self):
            return self.getToken(MyParser.DEFVAR, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def list_(self):
            return self.getTypedRuleContext(MyParser.ListContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_defvar_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefvar_block" ):
                return visitor.visitDefvar_block(self)
            else:
                return visitor.visitChildren(self)




    def defvar_block(self):

        localctx = MyParser.Defvar_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_defvar_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.match(MyParser.DEFVAR)
            self.state = 354
            self.match(MyParser.SYMBOL)
            self.state = 356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 355
                self.list_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Setq_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETQ(self):
            return self.getToken(MyParser.SETQ, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def list_(self):
            return self.getTypedRuleContext(MyParser.ListContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_setq_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetq_block" ):
                return visitor.visitSetq_block(self)
            else:
                return visitor.visitChildren(self)




    def setq_block(self):

        localctx = MyParser.Setq_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_setq_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(MyParser.SETQ)
            self.state = 359
            self.match(MyParser.SYMBOL)
            self.state = 360
            self.list_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cond_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COND(self):
            return self.getToken(MyParser.COND, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.LPAREN)
            else:
                return self.getToken(MyParser.LPAREN, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.RPAREN)
            else:
                return self.getToken(MyParser.RPAREN, i)

        def getRuleIndex(self):
            return MyParser.RULE_cond_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond_block" ):
                return visitor.visitCond_block(self)
            else:
                return visitor.visitChildren(self)




    def cond_block(self):

        localctx = MyParser.Cond_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_cond_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(MyParser.COND)
            self.state = 368 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 363
                    self.match(MyParser.LPAREN)
                    self.state = 364
                    self.list_()
                    self.state = 365
                    self.list_()
                    self.state = 366
                    self.match(MyParser.RPAREN)

                else:
                    raise NoViableAltException(self)
                self.state = 370 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Loop_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self):
            return self.getToken(MyParser.LOOP, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_loop_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_block" ):
                return visitor.visitLoop_block(self)
            else:
                return visitor.visitChildren(self)




    def loop_block(self):

        localctx = MyParser.Loop_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_loop_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(MyParser.LOOP)
            self.state = 376
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 373
                    self.list_() 
                self.state = 378
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Let_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(MyParser.LET, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.LPAREN)
            else:
                return self.getToken(MyParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.RPAREN)
            else:
                return self.getToken(MyParser.RPAREN, i)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_let_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLet_block" ):
                return visitor.visitLet_block(self)
            else:
                return visitor.visitChildren(self)




    def let_block(self):

        localctx = MyParser.Let_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_let_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(MyParser.LET)
            self.state = 380
            self.match(MyParser.LPAREN)
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==76:
                self.state = 381
                self.match(MyParser.LPAREN)
                self.state = 382
                self.match(MyParser.SYMBOL)
                self.state = 383
                self.list_()
                self.state = 384
                self.match(MyParser.RPAREN)
                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 391
            self.match(MyParser.RPAREN)
            self.state = 395
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 392
                    self.list_() 
                self.state = 397
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Let_star_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET_STAR(self):
            return self.getToken(MyParser.LET_STAR, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.LPAREN)
            else:
                return self.getToken(MyParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.RPAREN)
            else:
                return self.getToken(MyParser.RPAREN, i)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_let_star_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLet_star_block" ):
                return visitor.visitLet_star_block(self)
            else:
                return visitor.visitChildren(self)




    def let_star_block(self):

        localctx = MyParser.Let_star_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_let_star_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(MyParser.LET_STAR)
            self.state = 399
            self.match(MyParser.LPAREN)
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==76:
                self.state = 400
                self.match(MyParser.LPAREN)
                self.state = 401
                self.match(MyParser.SYMBOL)
                self.state = 402
                self.list_()
                self.state = 403
                self.match(MyParser.RPAREN)
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 410
            self.match(MyParser.RPAREN)
            self.state = 414
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 411
                    self.list_() 
                self.state = 416
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unless_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLESS(self):
            return self.getToken(MyParser.UNLESS, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_unless_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnless_block" ):
                return visitor.visitUnless_block(self)
            else:
                return visitor.visitChildren(self)




    def unless_block(self):

        localctx = MyParser.Unless_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_unless_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(MyParser.UNLESS)
            self.state = 418
            self.list_()
            self.state = 419
            self.list_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(MyParser.WHEN, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_when_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhen_block" ):
                return visitor.visitWhen_block(self)
            else:
                return visitor.visitChildren(self)




    def when_block(self):

        localctx = MyParser.When_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_when_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(MyParser.WHEN)
            self.state = 422
            self.list_()
            self.state = 423
            self.list_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(MyParser.LAMBDA, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def ATOM(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.ATOM)
            else:
                return self.getToken(MyParser.ATOM, i)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def getRuleIndex(self):
            return MyParser.RULE_lambda_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_block" ):
                return visitor.visitLambda_block(self)
            else:
                return visitor.visitChildren(self)




    def lambda_block(self):

        localctx = MyParser.Lambda_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_lambda_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(MyParser.LAMBDA)
            self.state = 426
            self.match(MyParser.LPAREN)
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93 or _la==94:
                self.state = 427
                _la = self._input.LA(1)
                if not(_la==93 or _la==94):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 433
            self.match(MyParser.RPAREN)
            self.state = 435 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 434
                    self.list_()

                else:
                    raise NoViableAltException(self)
                self.state = 437 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(MyParser.FUNCTION, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def getRuleIndex(self):
            return MyParser.RULE_function_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_block" ):
                return visitor.visitFunction_block(self)
            else:
                return visitor.visitChildren(self)




    def function_block(self):

        localctx = MyParser.Function_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_function_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.match(MyParser.FUNCTION)
            self.state = 440
            self.match(MyParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defmacro_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFMACRO(self):
            return self.getToken(MyParser.DEFMACRO, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_defmacro_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefmacro_block" ):
                return visitor.visitDefmacro_block(self)
            else:
                return visitor.visitChildren(self)




    def defmacro_block(self):

        localctx = MyParser.Defmacro_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_defmacro_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(MyParser.DEFMACRO)
            self.state = 443
            self.match(MyParser.SYMBOL)
            self.state = 444
            self.match(MyParser.LPAREN)
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 445
                self.match(MyParser.SYMBOL)
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 451
            self.match(MyParser.RPAREN)
            self.state = 455
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 452
                    self.list_() 
                self.state = 457
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(MyParser.CASE, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.LPAREN)
            else:
                return self.getToken(MyParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.RPAREN)
            else:
                return self.getToken(MyParser.RPAREN, i)

        def getRuleIndex(self):
            return MyParser.RULE_case_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_block" ):
                return visitor.visitCase_block(self)
            else:
                return visitor.visitChildren(self)




    def case_block(self):

        localctx = MyParser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_case_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(MyParser.CASE)
            self.state = 459
            self.list_()
            self.state = 470 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 460
                    self.match(MyParser.LPAREN)
                    self.state = 461
                    self.list_()
                    self.state = 465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==76:
                        self.state = 462
                        self.list_()
                        self.state = 467
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 468
                    self.match(MyParser.RPAREN)

                else:
                    raise NoViableAltException(self)
                self.state = 472 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tagbody_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAGBODY(self):
            return self.getToken(MyParser.TAGBODY, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_tagbody_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTagbody_block" ):
                return visitor.visitTagbody_block(self)
            else:
                return visitor.visitChildren(self)




    def tagbody_block(self):

        localctx = MyParser.Tagbody_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_tagbody_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(MyParser.TAGBODY)
            self.state = 478
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 475
                    self.list_() 
                self.state = 480
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(MyParser.THROW, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def list_(self):
            return self.getTypedRuleContext(MyParser.ListContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_throw_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrow_block" ):
                return visitor.visitThrow_block(self)
            else:
                return visitor.visitChildren(self)




    def throw_block(self):

        localctx = MyParser.Throw_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_throw_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.match(MyParser.THROW)
            self.state = 482
            self.match(MyParser.SYMBOL)
            self.state = 483
            self.list_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(MyParser.CATCH, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_catch_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatch_block" ):
                return visitor.visitCatch_block(self)
            else:
                return visitor.visitChildren(self)




    def catch_block(self):

        localctx = MyParser.Catch_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_catch_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(MyParser.CATCH)
            self.state = 486
            self.match(MyParser.SYMBOL)
            self.state = 490
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 487
                    self.list_() 
                self.state = 492
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_open_file_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_OPEN_FILE(self):
            return self.getToken(MyParser.WITH_OPEN_FILE, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def getRuleIndex(self):
            return MyParser.RULE_with_open_file_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_open_file_block" ):
                return visitor.visitWith_open_file_block(self)
            else:
                return visitor.visitChildren(self)




    def with_open_file_block(self):

        localctx = MyParser.With_open_file_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_with_open_file_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(MyParser.WITH_OPEN_FILE)
            self.state = 494
            self.match(MyParser.LPAREN)
            self.state = 495
            self.match(MyParser.SYMBOL)
            self.state = 496
            self.list_()
            self.state = 497
            self.match(MyParser.RPAREN)
            self.state = 501
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 498
                    self.list_() 
                self.state = 503
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_output_to_file_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_OUTPUT_TO_FILE(self):
            return self.getToken(MyParser.WITH_OUTPUT_TO_FILE, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def getRuleIndex(self):
            return MyParser.RULE_with_output_to_file_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_output_to_file_block" ):
                return visitor.visitWith_output_to_file_block(self)
            else:
                return visitor.visitChildren(self)




    def with_output_to_file_block(self):

        localctx = MyParser.With_output_to_file_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_with_output_to_file_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(MyParser.WITH_OUTPUT_TO_FILE)
            self.state = 505
            self.match(MyParser.LPAREN)
            self.state = 506
            self.match(MyParser.SYMBOL)
            self.state = 507
            self.list_()
            self.state = 508
            self.match(MyParser.RPAREN)
            self.state = 512
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 509
                    self.list_() 
                self.state = 514
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_input_from_string_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_INPUT_FROM_STRING(self):
            return self.getToken(MyParser.WITH_INPUT_FROM_STRING, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def getRuleIndex(self):
            return MyParser.RULE_with_input_from_string_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_input_from_string_block" ):
                return visitor.visitWith_input_from_string_block(self)
            else:
                return visitor.visitChildren(self)




    def with_input_from_string_block(self):

        localctx = MyParser.With_input_from_string_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_with_input_from_string_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(MyParser.WITH_INPUT_FROM_STRING)
            self.state = 516
            self.match(MyParser.LPAREN)
            self.state = 517
            self.match(MyParser.SYMBOL)
            self.state = 518
            self.list_()
            self.state = 519
            self.match(MyParser.RPAREN)
            self.state = 523
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 520
                    self.list_() 
                self.state = 525
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_output_to_string_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_OUTPUT_TO_STRING(self):
            return self.getToken(MyParser.WITH_OUTPUT_TO_STRING, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def getRuleIndex(self):
            return MyParser.RULE_with_output_to_string_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_output_to_string_block" ):
                return visitor.visitWith_output_to_string_block(self)
            else:
                return visitor.visitChildren(self)




    def with_output_to_string_block(self):

        localctx = MyParser.With_output_to_string_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_with_output_to_string_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.match(MyParser.WITH_OUTPUT_TO_STRING)
            self.state = 527
            self.match(MyParser.LPAREN)
            self.state = 528
            self.match(MyParser.SYMBOL)
            self.state = 529
            self.list_()
            self.state = 530
            self.match(MyParser.RPAREN)
            self.state = 534
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 531
                    self.list_() 
                self.state = 536
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_stream_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_STREAM(self):
            return self.getToken(MyParser.WITH_STREAM, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def getRuleIndex(self):
            return MyParser.RULE_with_stream_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stream_block" ):
                return visitor.visitWith_stream_block(self)
            else:
                return visitor.visitChildren(self)




    def with_stream_block(self):

        localctx = MyParser.With_stream_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_with_stream_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(MyParser.WITH_STREAM)
            self.state = 538
            self.match(MyParser.LPAREN)
            self.state = 539
            self.match(MyParser.SYMBOL)
            self.state = 540
            self.list_()
            self.state = 541
            self.match(MyParser.RPAREN)
            self.state = 545
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 542
                    self.list_() 
                self.state = 547
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_timeout_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_TIMEOUT(self):
            return self.getToken(MyParser.WITH_TIMEOUT, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def ATOM(self):
            return self.getToken(MyParser.ATOM, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_with_timeout_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_timeout_block" ):
                return visitor.visitWith_timeout_block(self)
            else:
                return visitor.visitChildren(self)




    def with_timeout_block(self):

        localctx = MyParser.With_timeout_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_with_timeout_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(MyParser.WITH_TIMEOUT)
            self.state = 549
            self.match(MyParser.LPAREN)
            self.state = 550
            self.match(MyParser.ATOM)
            self.state = 551
            self.match(MyParser.RPAREN)
            self.state = 555
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 552
                    self.list_() 
                self.state = 557
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MyParser.TYPE, 0)

        def list_(self):
            return self.getTypedRuleContext(MyParser.ListContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_type_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_block" ):
                return visitor.visitType_block(self)
            else:
                return visitor.visitChildren(self)




    def type_block(self):

        localctx = MyParser.Type_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_type_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(MyParser.TYPE)
            self.state = 559
            self.list_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_of_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_OF(self):
            return self.getToken(MyParser.TYPE_OF, 0)

        def list_(self):
            return self.getTypedRuleContext(MyParser.ListContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_type_of_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_of_block" ):
                return visitor.visitType_of_block(self)
            else:
                return visitor.visitChildren(self)




    def type_of_block(self):

        localctx = MyParser.Type_of_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_type_of_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(MyParser.TYPE_OF)
            self.state = 562
            self.list_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(MyParser.CLASS, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_class_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_block" ):
                return visitor.visitClass_block(self)
            else:
                return visitor.visitChildren(self)




    def class_block(self):

        localctx = MyParser.Class_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_class_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(MyParser.CLASS)
            self.state = 568
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 565
                    self.list_() 
                self.state = 570
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(MyParser.NOT, 0)

        def list_(self):
            return self.getTypedRuleContext(MyParser.ListContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_not_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_block" ):
                return visitor.visitNot_block(self)
            else:
                return visitor.visitChildren(self)




    def not_block(self):

        localctx = MyParser.Not_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_not_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(MyParser.NOT)
            self.state = 572
            self.list_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(MyParser.OR, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_or_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_block" ):
                return visitor.visitOr_block(self)
            else:
                return visitor.visitChildren(self)




    def or_block(self):

        localctx = MyParser.Or_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_or_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(MyParser.OR)
            self.state = 578
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 575
                    self.list_() 
                self.state = 580
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(MyParser.AND, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_and_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_block" ):
                return visitor.visitAnd_block(self)
            else:
                return visitor.visitChildren(self)




    def and_block(self):

        localctx = MyParser.And_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_and_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(MyParser.AND)
            self.state = 585
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 582
                    self.list_() 
                self.state = 587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(MyParser.IMPORT, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def getRuleIndex(self):
            return MyParser.RULE_import_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_block" ):
                return visitor.visitImport_block(self)
            else:
                return visitor.visitChildren(self)




    def import_block(self):

        localctx = MyParser.Import_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_import_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(MyParser.IMPORT)
            self.state = 589
            self.match(MyParser.LPAREN)
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 590
                self.match(MyParser.SYMBOL)
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 596
            self.match(MyParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Export_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPORT(self):
            return self.getToken(MyParser.EXPORT, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def getRuleIndex(self):
            return MyParser.RULE_export_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExport_block" ):
                return visitor.visitExport_block(self)
            else:
                return visitor.visitChildren(self)




    def export_block(self):

        localctx = MyParser.Export_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_export_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(MyParser.EXPORT)
            self.state = 599
            self.match(MyParser.LPAREN)
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 600
                self.match(MyParser.SYMBOL)
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 606
            self.match(MyParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Do_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(MyParser.DO, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_do_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDo_block" ):
                return visitor.visitDo_block(self)
            else:
                return visitor.visitChildren(self)




    def do_block(self):

        localctx = MyParser.Do_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_do_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(MyParser.DO)
            self.state = 612
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 609
                    self.list_() 
                self.state = 614
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defparameter_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFPARAMETER(self):
            return self.getToken(MyParser.DEFPARAMETER, 0)

        def ATOM(self):
            return self.getToken(MyParser.ATOM, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def VAR(self):
            return self.getToken(MyParser.VAR, 0)

        def STRING(self):
            return self.getToken(MyParser.STRING, 0)

        def list_(self):
            return self.getTypedRuleContext(MyParser.ListContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_defparameter_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefparameter_block" ):
                return visitor.visitDefparameter_block(self)
            else:
                return visitor.visitChildren(self)




    def defparameter_block(self):

        localctx = MyParser.Defparameter_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_defparameter_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(MyParser.DEFPARAMETER)
            self.state = 616
            _la = self._input.LA(1)
            if not(((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 619
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [95]:
                self.state = 617
                self.match(MyParser.STRING)
                pass
            elif token in [76]:
                self.state = 618
                self.list_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defconstant_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFCONSTANT(self):
            return self.getToken(MyParser.DEFCONSTANT, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def list_(self):
            return self.getTypedRuleContext(MyParser.ListContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_defconstant_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefconstant_block" ):
                return visitor.visitDefconstant_block(self)
            else:
                return visitor.visitChildren(self)




    def defconstant_block(self):

        localctx = MyParser.Defconstant_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_defconstant_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(MyParser.DEFCONSTANT)
            self.state = 622
            self.match(MyParser.SYMBOL)
            self.state = 623
            self.list_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defgeneric_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFGENERIC(self):
            return self.getToken(MyParser.DEFGENERIC, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_defgeneric_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefgeneric_block" ):
                return visitor.visitDefgeneric_block(self)
            else:
                return visitor.visitChildren(self)




    def defgeneric_block(self):

        localctx = MyParser.Defgeneric_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_defgeneric_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(MyParser.DEFGENERIC)
            self.state = 626
            self.match(MyParser.SYMBOL)
            self.state = 627
            self.match(MyParser.LPAREN)
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 628
                self.match(MyParser.SYMBOL)
                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 634
            self.match(MyParser.RPAREN)
            self.state = 638
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 635
                    self.list_() 
                self.state = 640
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defstruct_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFSTRUCT(self):
            return self.getToken(MyParser.DEFSTRUCT, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_defstruct_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefstruct_block" ):
                return visitor.visitDefstruct_block(self)
            else:
                return visitor.visitChildren(self)




    def defstruct_block(self):

        localctx = MyParser.Defstruct_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_defstruct_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(MyParser.DEFSTRUCT)
            self.state = 642
            self.match(MyParser.SYMBOL)
            self.state = 643
            self.match(MyParser.LPAREN)
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 644
                self.match(MyParser.SYMBOL)
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 645
                    self.list_()


                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 653
            self.match(MyParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defmethod_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFMETHOD(self):
            return self.getToken(MyParser.DEFMETHOD, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_defmethod_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefmethod_block" ):
                return visitor.visitDefmethod_block(self)
            else:
                return visitor.visitChildren(self)




    def defmethod_block(self):

        localctx = MyParser.Defmethod_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_defmethod_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(MyParser.DEFMETHOD)
            self.state = 656
            self.match(MyParser.SYMBOL)
            self.state = 657
            self.match(MyParser.LPAREN)
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 658
                self.match(MyParser.SYMBOL)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 664
            self.match(MyParser.RPAREN)
            self.state = 668
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 665
                    self.list_() 
                self.state = 670
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defclass_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFCLASS(self):
            return self.getToken(MyParser.DEFCLASS, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_defclass_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefclass_block" ):
                return visitor.visitDefclass_block(self)
            else:
                return visitor.visitChildren(self)




    def defclass_block(self):

        localctx = MyParser.Defclass_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_defclass_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(MyParser.DEFCLASS)
            self.state = 672
            self.match(MyParser.SYMBOL)
            self.state = 673
            self.match(MyParser.LPAREN)
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 674
                self.match(MyParser.SYMBOL)
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 675
                    self.list_()


                self.state = 682
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 683
            self.match(MyParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fuction_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(MyParser.FUNCTION, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def getRuleIndex(self):
            return MyParser.RULE_fuction_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuction_block" ):
                return visitor.visitFuction_block(self)
            else:
                return visitor.visitChildren(self)




    def fuction_block(self):

        localctx = MyParser.Fuction_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_fuction_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(MyParser.FUNCTION)
            self.state = 686
            self.match(MyParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Progn_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROGN(self):
            return self.getToken(MyParser.PROGN, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_progn_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgn_block" ):
                return visitor.visitProgn_block(self)
            else:
                return visitor.visitChildren(self)




    def progn_block(self):

        localctx = MyParser.Progn_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_progn_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(MyParser.PROGN)
            self.state = 692
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 689
                    self.list_() 
                self.state = 694
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Valus_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(MyParser.VALUES, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_valus_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValus_block" ):
                return visitor.visitValus_block(self)
            else:
                return visitor.visitChildren(self)




    def valus_block(self):

        localctx = MyParser.Valus_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_valus_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(MyParser.VALUES)
            self.state = 699
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 696
                    self.list_() 
                self.state = 701
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_package_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_PACKAGE(self):
            return self.getToken(MyParser.USE_PACKAGE, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def ATOM(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.ATOM)
            else:
                return self.getToken(MyParser.ATOM, i)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def getRuleIndex(self):
            return MyParser.RULE_use_package_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse_package_block" ):
                return visitor.visitUse_package_block(self)
            else:
                return visitor.visitChildren(self)




    def use_package_block(self):

        localctx = MyParser.Use_package_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_use_package_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(MyParser.USE_PACKAGE)
            self.state = 703
            self.match(MyParser.LPAREN)
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93 or _la==94:
                self.state = 704
                _la = self._input.LA(1)
                if not(_la==93 or _la==94):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 710
            self.match(MyParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deftype_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFTYPE(self):
            return self.getToken(MyParser.DEFTYPE, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def list_(self):
            return self.getTypedRuleContext(MyParser.ListContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_deftype_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeftype_block" ):
                return visitor.visitDeftype_block(self)
            else:
                return visitor.visitChildren(self)




    def deftype_block(self):

        localctx = MyParser.Deftype_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_deftype_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(MyParser.DEFTYPE)
            self.state = 713
            self.match(MyParser.SYMBOL)
            self.state = 714
            self.list_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declaim_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLAIM(self):
            return self.getToken(MyParser.DECLAIM, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.LPAREN)
            else:
                return self.getToken(MyParser.LPAREN, i)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.RPAREN)
            else:
                return self.getToken(MyParser.RPAREN, i)

        def getRuleIndex(self):
            return MyParser.RULE_declaim_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaim_block" ):
                return visitor.visitDeclaim_block(self)
            else:
                return visitor.visitChildren(self)




    def declaim_block(self):

        localctx = MyParser.Declaim_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_declaim_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.match(MyParser.DECLAIM)
            self.state = 721 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 717
                    self.match(MyParser.LPAREN)
                    self.state = 718
                    self.match(MyParser.SYMBOL)
                    self.state = 719
                    self.match(MyParser.SYMBOL)
                    self.state = 720
                    self.match(MyParser.RPAREN)

                else:
                    raise NoViableAltException(self)
                self.state = 723 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Letrec_blokcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETREC(self):
            return self.getToken(MyParser.LETREC, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.LPAREN)
            else:
                return self.getToken(MyParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.RPAREN)
            else:
                return self.getToken(MyParser.RPAREN, i)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_letrec_blokc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetrec_blokc" ):
                return visitor.visitLetrec_blokc(self)
            else:
                return visitor.visitChildren(self)




    def letrec_blokc(self):

        localctx = MyParser.Letrec_blokcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_letrec_blokc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(MyParser.LETREC)
            self.state = 726
            self.match(MyParser.LPAREN)
            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==76:
                self.state = 727
                self.match(MyParser.LPAREN)
                self.state = 728
                self.match(MyParser.SYMBOL)
                self.state = 729
                self.list_()
                self.state = 730
                self.match(MyParser.RPAREN)
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 737
            self.match(MyParser.RPAREN)
            self.state = 741
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 738
                    self.list_() 
                self.state = 743
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(MyParser.DECLARE, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.LPAREN)
            else:
                return self.getToken(MyParser.LPAREN, i)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.RPAREN)
            else:
                return self.getToken(MyParser.RPAREN, i)

        def getRuleIndex(self):
            return MyParser.RULE_declare_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_block" ):
                return visitor.visitDeclare_block(self)
            else:
                return visitor.visitChildren(self)




    def declare_block(self):

        localctx = MyParser.Declare_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_declare_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.match(MyParser.DECLARE)
            self.state = 749 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 745
                    self.match(MyParser.LPAREN)
                    self.state = 746
                    self.match(MyParser.SYMBOL)
                    self.state = 747
                    self.match(MyParser.SYMBOL)
                    self.state = 748
                    self.match(MyParser.RPAREN)

                else:
                    raise NoViableAltException(self)
                self.state = 751 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Go_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GO(self):
            return self.getToken(MyParser.GO, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def getRuleIndex(self):
            return MyParser.RULE_go_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGo_block" ):
                return visitor.visitGo_block(self)
            else:
                return visitor.visitChildren(self)




    def go_block(self):

        localctx = MyParser.Go_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_go_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(MyParser.GO)
            self.state = 754
            self.match(MyParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Handler_bind_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER_BIND(self):
            return self.getToken(MyParser.HANDLER_BIND, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_handler_bind_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandler_bind_block" ):
                return visitor.visitHandler_bind_block(self)
            else:
                return visitor.visitChildren(self)




    def handler_bind_block(self):

        localctx = MyParser.Handler_bind_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_handler_bind_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(MyParser.HANDLER_BIND)
            self.state = 757
            self.match(MyParser.LPAREN)
            self.state = 760 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 758
                self.match(MyParser.SYMBOL)
                self.state = 759
                self.list_()
                self.state = 762 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==94):
                    break

            self.state = 764
            self.match(MyParser.RPAREN)
            self.state = 768
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 765
                    self.list_() 
                self.state = 770
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restart_bind_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTART_BIND(self):
            return self.getToken(MyParser.RESTART_BIND, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_restart_bind_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestart_bind_block" ):
                return visitor.visitRestart_bind_block(self)
            else:
                return visitor.visitChildren(self)




    def restart_bind_block(self):

        localctx = MyParser.Restart_bind_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_restart_bind_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(MyParser.RESTART_BIND)
            self.state = 772
            self.match(MyParser.LPAREN)
            self.state = 775 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 773
                self.match(MyParser.SYMBOL)
                self.state = 774
                self.list_()
                self.state = 777 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==94):
                    break

            self.state = 779
            self.match(MyParser.RPAREN)
            self.state = 783
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 780
                    self.list_() 
                self.state = 785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Handler_case_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER_CASE(self):
            return self.getToken(MyParser.HANDLER_CASE, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_handler_case_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandler_case_block" ):
                return visitor.visitHandler_case_block(self)
            else:
                return visitor.visitChildren(self)




    def handler_case_block(self):

        localctx = MyParser.Handler_case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_handler_case_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(MyParser.HANDLER_CASE)
            self.state = 787
            self.match(MyParser.LPAREN)
            self.state = 790 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 788
                self.match(MyParser.SYMBOL)
                self.state = 789
                self.list_()
                self.state = 792 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==94):
                    break

            self.state = 794
            self.match(MyParser.RPAREN)
            self.state = 798
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 795
                    self.list_() 
                self.state = 800
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restart_case_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTART_CASE(self):
            return self.getToken(MyParser.RESTART_CASE, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_restart_case_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestart_case_block" ):
                return visitor.visitRestart_case_block(self)
            else:
                return visitor.visitChildren(self)




    def restart_case_block(self):

        localctx = MyParser.Restart_case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_restart_case_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.match(MyParser.RESTART_CASE)
            self.state = 802
            self.match(MyParser.LPAREN)
            self.state = 805 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 803
                self.match(MyParser.SYMBOL)
                self.state = 804
                self.list_()
                self.state = 807 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==94):
                    break

            self.state = 809
            self.match(MyParser.RPAREN)
            self.state = 813
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 810
                    self.list_() 
                self.state = 815
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_accessors_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_ACCESSORS(self):
            return self.getToken(MyParser.WITH_ACCESSORS, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_with_accessors_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_accessors_block" ):
                return visitor.visitWith_accessors_block(self)
            else:
                return visitor.visitChildren(self)




    def with_accessors_block(self):

        localctx = MyParser.With_accessors_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_with_accessors_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(MyParser.WITH_ACCESSORS)
            self.state = 817
            self.match(MyParser.LPAREN)
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 818
                self.match(MyParser.SYMBOL)
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 824
            self.match(MyParser.RPAREN)
            self.state = 828
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 825
                    self.list_() 
                self.state = 830
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_slots_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SLOTS(self):
            return self.getToken(MyParser.WITH_SLOTS, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def getRuleIndex(self):
            return MyParser.RULE_with_slots_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_slots_block" ):
                return visitor.visitWith_slots_block(self)
            else:
                return visitor.visitChildren(self)




    def with_slots_block(self):

        localctx = MyParser.With_slots_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_with_slots_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(MyParser.WITH_SLOTS)
            self.state = 832
            self.match(MyParser.LPAREN)
            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 833
                self.match(MyParser.SYMBOL)
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 839
            self.match(MyParser.RPAREN)
            self.state = 843
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 840
                    self.list_() 
                self.state = 845
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slot_value_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLOT_VALUE(self):
            return self.getToken(MyParser.SLOT_VALUE, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def getRuleIndex(self):
            return MyParser.RULE_slot_value_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlot_value_block" ):
                return visitor.visitSlot_value_block(self)
            else:
                return visitor.visitChildren(self)




    def slot_value_block(self):

        localctx = MyParser.Slot_value_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_slot_value_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(MyParser.SLOT_VALUE)
            self.state = 847
            self.match(MyParser.SYMBOL)
            self.state = 848
            self.match(MyParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initialize_instance_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIALIZE_INSTANCE(self):
            return self.getToken(MyParser.INITIALIZE_INSTANCE, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.LPAREN)
            else:
                return self.getToken(MyParser.LPAREN, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.RPAREN)
            else:
                return self.getToken(MyParser.RPAREN, i)

        def getRuleIndex(self):
            return MyParser.RULE_initialize_instance_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitialize_instance_block" ):
                return visitor.visitInitialize_instance_block(self)
            else:
                return visitor.visitChildren(self)




    def initialize_instance_block(self):

        localctx = MyParser.Initialize_instance_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_initialize_instance_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(MyParser.INITIALIZE_INSTANCE)
            self.state = 851
            self.match(MyParser.SYMBOL)
            self.state = 859
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 852
                    self.match(MyParser.LPAREN)
                    self.state = 853
                    self.match(MyParser.SYMBOL)
                    self.state = 854
                    self.list_()
                    self.state = 855
                    self.match(MyParser.RPAREN) 
                self.state = 861
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Make_instance_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAKE_INSTANCE(self):
            return self.getToken(MyParser.MAKE_INSTANCE, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.LPAREN)
            else:
                return self.getToken(MyParser.LPAREN, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.RPAREN)
            else:
                return self.getToken(MyParser.RPAREN, i)

        def getRuleIndex(self):
            return MyParser.RULE_make_instance_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMake_instance_block" ):
                return visitor.visitMake_instance_block(self)
            else:
                return visitor.visitChildren(self)




    def make_instance_block(self):

        localctx = MyParser.Make_instance_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_make_instance_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(MyParser.MAKE_INSTANCE)
            self.state = 863
            self.match(MyParser.SYMBOL)
            self.state = 871
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 864
                    self.match(MyParser.LPAREN)
                    self.state = 865
                    self.match(MyParser.SYMBOL)
                    self.state = 866
                    self.list_()
                    self.state = 867
                    self.match(MyParser.RPAREN) 
                self.state = 873
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(MyParser.ValueContext,0)


        def VAR(self):
            return self.getToken(MyParser.VAR, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def list_(self):
            return self.getTypedRuleContext(MyParser.ListContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_function_call

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call" ):
                return visitor.visitFunction_call(self)
            else:
                return visitor.visitChildren(self)




    def function_call(self):

        localctx = MyParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 877
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92, 94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                _la = self._input.LA(1)
                if not(_la==92 or _la==94):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 875
                self.value()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 2)
                self.state = 876
                self.list_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(MyParser.BLOCK, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def list_(self):
            return self.getTypedRuleContext(MyParser.ListContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_block_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock_block" ):
                return visitor.visitBlock_block(self)
            else:
                return visitor.visitChildren(self)




    def block_block(self):

        localctx = MyParser.Block_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_block_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(MyParser.BLOCK)
            self.state = 880
            self.match(MyParser.SYMBOL)
            self.state = 881
            self.list_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RETURN(self):
            return self.getToken(MyParser.RETURN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def VAR(self):
            return self.getToken(MyParser.VAR, 0)

        def function_call(self):
            return self.getTypedRuleContext(MyParser.Function_callContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_return_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_block" ):
                return visitor.visitReturn_block(self)
            else:
                return visitor.visitChildren(self)




    def return_block(self):

        localctx = MyParser.Return_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_return_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(MyParser.LPAREN)
            self.state = 884
            self.match(MyParser.RETURN)
            self.state = 889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 885
                self.match(MyParser.SYMBOL)
                pass

            elif la_ == 2:
                self.state = 886
                self.match(MyParser.VAR)
                pass

            elif la_ == 3:
                self.state = 887
                self.function_call()
                pass

            elif la_ == 4:
                pass


            self.state = 891
            self.match(MyParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_from_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RETURN_FROM(self):
            return self.getToken(MyParser.RETURN_FROM, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def VAR(self):
            return self.getToken(MyParser.VAR, 0)

        def function_call(self):
            return self.getTypedRuleContext(MyParser.Function_callContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_return_from_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_from_block" ):
                return visitor.visitReturn_from_block(self)
            else:
                return visitor.visitChildren(self)




    def return_from_block(self):

        localctx = MyParser.Return_from_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_return_from_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(MyParser.LPAREN)
            self.state = 894
            self.match(MyParser.RETURN_FROM)
            self.state = 895
            self.match(MyParser.SYMBOL)
            self.state = 900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 896
                self.match(MyParser.SYMBOL)
                pass

            elif la_ == 2:
                self.state = 897
                self.match(MyParser.VAR)
                pass

            elif la_ == 3:
                self.state = 898
                self.function_call()
                pass

            elif la_ == 4:
                pass


            self.state = 902
            self.match(MyParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defpackage_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFPACKAGE(self):
            return self.getToken(MyParser.DEFPACKAGE, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.COLON)
            else:
                return self.getToken(MyParser.COLON, i)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def DOCUMENTATION(self):
            return self.getToken(MyParser.DOCUMENTATION, 0)

        def STRING(self):
            return self.getToken(MyParser.STRING, 0)

        def USE(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.USE)
            else:
                return self.getToken(MyParser.USE, i)

        def EXPORT(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.EXPORT)
            else:
                return self.getToken(MyParser.EXPORT, i)

        def IMPORT_FROM(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.IMPORT_FROM)
            else:
                return self.getToken(MyParser.IMPORT_FROM, i)

        def SHADOW(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SHADOW)
            else:
                return self.getToken(MyParser.SHADOW, i)

        def NICKNAMES(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.NICKNAMES)
            else:
                return self.getToken(MyParser.NICKNAMES, i)

        def getRuleIndex(self):
            return MyParser.RULE_defpackage_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefpackage_block" ):
                return visitor.visitDefpackage_block(self)
            else:
                return visitor.visitChildren(self)




    def defpackage_block(self):

        localctx = MyParser.Defpackage_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_defpackage_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.match(MyParser.DEFPACKAGE)
            self.state = 905
            self.match(MyParser.COLON)
            self.state = 906
            self.match(MyParser.SYMBOL)
            self.state = 907
            self.match(MyParser.LPAREN)
            self.state = 917
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.state = 908
                self.match(MyParser.COLON)
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 335544328) != 0) or _la==73 or _la==74:
                    self.state = 909
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 335544328) != 0) or _la==73 or _la==74):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [75]:
                self.state = 915
                self.match(MyParser.DOCUMENTATION)
                self.state = 916
                self.match(MyParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 919
            self.match(MyParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_package_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_PACKAGE(self):
            return self.getToken(MyParser.IN_PACKAGE, 0)

        def COLON(self):
            return self.getToken(MyParser.COLON, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def getRuleIndex(self):
            return MyParser.RULE_in_package_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_package_block" ):
                return visitor.visitIn_package_block(self)
            else:
                return visitor.visitChildren(self)




    def in_package_block(self):

        localctx = MyParser.In_package_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_in_package_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(MyParser.IN_PACKAGE)
            self.state = 922
            self.match(MyParser.COLON)
            self.state = 923
            self.match(MyParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(MyParser.STRING, 0)

        def INT(self):
            return self.getToken(MyParser.INT, 0)

        def getRuleIndex(self):
            return MyParser.RULE_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue" ):
                return visitor.visitValue(self)
            else:
                return visitor.visitChildren(self)




    def value(self):

        localctx = MyParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            _la = self._input.LA(1)
            if not(_la==95 or _la==96):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binding_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def value(self):
            return self.getTypedRuleContext(MyParser.ValueContext,0)


        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def SYMBOL(self):
            return self.getToken(MyParser.SYMBOL, 0)

        def VAR(self):
            return self.getToken(MyParser.VAR, 0)

        def binding_list(self):
            return self.getTypedRuleContext(MyParser.Binding_listContext,0)


        def getRuleIndex(self):
            return MyParser.RULE_binding_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinding_list" ):
                return visitor.visitBinding_list(self)
            else:
                return visitor.visitChildren(self)




    def binding_list(self):

        localctx = MyParser.Binding_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_binding_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.match(MyParser.LPAREN)
            self.state = 928
            _la = self._input.LA(1)
            if not(_la==92 or _la==94):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 929
            self.value()
            self.state = 930
            self.match(MyParser.RPAREN)
            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 931
                self.binding_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.LPAREN)
            else:
                return self.getToken(MyParser.LPAREN, i)

        def DEFPARAMETER(self):
            return self.getToken(MyParser.DEFPARAMETER, 0)

        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ValueContext)
            else:
                return self.getTypedRuleContext(MyParser.ValueContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.RPAREN)
            else:
                return self.getToken(MyParser.RPAREN, i)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def VAR(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.VAR)
            else:
                return self.getToken(MyParser.VAR, i)

        def STRING(self):
            return self.getToken(MyParser.STRING, 0)

        def DEFVAR(self):
            return self.getToken(MyParser.DEFVAR, 0)

        def SETQ(self):
            return self.getToken(MyParser.SETQ, 0)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def DECLARE(self):
            return self.getToken(MyParser.DECLARE, 0)

        def SPECIAL(self):
            return self.getToken(MyParser.SPECIAL, 0)

        def TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.TYPE)
            else:
                return self.getToken(MyParser.TYPE, i)

        def DATATYPES(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.DATATYPES)
            else:
                return self.getToken(MyParser.DATATYPES, i)

        def getRuleIndex(self):
            return MyParser.RULE_global_variable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_variable" ):
                return visitor.visitGlobal_variable(self)
            else:
                return visitor.visitChildren(self)




    def global_variable(self):

        localctx = MyParser.Global_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_global_variable)
        self._la = 0 # Token type
        try:
            self.state = 998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 934
                self.match(MyParser.LPAREN)
                self.state = 935
                self.match(MyParser.DEFPARAMETER)
                self.state = 936
                _la = self._input.LA(1)
                if not(_la==92 or _la==94):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 937
                self.value()
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 938
                    self.match(MyParser.STRING)


                self.state = 941
                self.match(MyParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 943
                self.match(MyParser.LPAREN)
                self.state = 944
                self.match(MyParser.DEFVAR)
                self.state = 945
                _la = self._input.LA(1)
                if not(_la==92 or _la==94):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 946
                self.value()
                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 947
                    self.match(MyParser.STRING)


                self.state = 950
                self.match(MyParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 952
                self.match(MyParser.LPAREN)
                self.state = 953
                self.match(MyParser.SETQ)
                self.state = 957 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 957
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [95, 96]:
                        self.state = 954
                        self.value()
                        pass
                    elif token in [92, 94]:
                        self.state = 955
                        _la = self._input.LA(1)
                        if not(_la==92 or _la==94):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 956
                        self.list_()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 959 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & 29) != 0)):
                        break

                self.state = 961
                self.match(MyParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 963
                self.match(MyParser.LPAREN)
                self.state = 964
                self.match(MyParser.DECLARE)
                self.state = 965
                self.match(MyParser.LPAREN)
                self.state = 966
                self.match(MyParser.SPECIAL)
                self.state = 968 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 967
                    _la = self._input.LA(1)
                    if not(_la==92 or _la==94):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 970 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==92 or _la==94):
                        break

                self.state = 972
                self.match(MyParser.RPAREN)
                self.state = 973
                self.match(MyParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 974
                self.match(MyParser.LPAREN)
                self.state = 975
                self.match(MyParser.DECLARE)
                self.state = 976
                self.match(MyParser.LPAREN)
                self.state = 977
                self.match(MyParser.TYPE)
                self.state = 978
                self.match(MyParser.DATATYPES)
                self.state = 980 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 979
                    _la = self._input.LA(1)
                    if not(_la==92 or _la==94):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 982 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==92 or _la==94):
                        break

                self.state = 984
                self.match(MyParser.RPAREN)
                self.state = 985
                self.match(MyParser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 986
                self.match(MyParser.LPAREN)
                self.state = 987
                self.match(MyParser.DECLARE)
                self.state = 993 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 988
                    self.match(MyParser.LPAREN)
                    self.state = 989
                    self.match(MyParser.TYPE)
                    self.state = 990
                    self.match(MyParser.DATATYPES)
                    self.state = 991
                    _la = self._input.LA(1)
                    if not(_la==92 or _la==94):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 992
                    self.match(MyParser.RPAREN)
                    self.state = 995 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==76):
                        break

                self.state = 997
                self.match(MyParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(MyParser.LET, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.LPAREN)
            else:
                return self.getToken(MyParser.LPAREN, i)

        def binding_list(self):
            return self.getTypedRuleContext(MyParser.Binding_listContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.RPAREN)
            else:
                return self.getToken(MyParser.RPAREN, i)

        def LET_STAR(self):
            return self.getToken(MyParser.LET_STAR, 0)

        def SETQ(self):
            return self.getToken(MyParser.SETQ, 0)

        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ValueContext)
            else:
                return self.getTypedRuleContext(MyParser.ValueContext,i)


        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.SYMBOL)
            else:
                return self.getToken(MyParser.SYMBOL, i)

        def VAR(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.VAR)
            else:
                return self.getToken(MyParser.VAR, i)

        def list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MyParser.ListContext)
            else:
                return self.getTypedRuleContext(MyParser.ListContext,i)


        def DECLARE(self):
            return self.getToken(MyParser.DECLARE, 0)

        def TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.TYPE)
            else:
                return self.getToken(MyParser.TYPE, i)

        def DATATYPES(self, i:int=None):
            if i is None:
                return self.getTokens(MyParser.DATATYPES)
            else:
                return self.getToken(MyParser.DATATYPES, i)

        def getRuleIndex(self):
            return MyParser.RULE_local_variable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocal_variable" ):
                return visitor.visitLocal_variable(self)
            else:
                return visitor.visitChildren(self)




    def local_variable(self):

        localctx = MyParser.Local_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_local_variable)
        self._la = 0 # Token type
        try:
            self.state = 1039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1000
                self.match(MyParser.LET)
                self.state = 1001
                self.match(MyParser.LPAREN)
                self.state = 1002
                self.binding_list()
                self.state = 1003
                self.match(MyParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1005
                self.match(MyParser.LET_STAR)
                self.state = 1006
                self.match(MyParser.LPAREN)
                self.state = 1007
                self.binding_list()
                self.state = 1008
                self.match(MyParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1010
                self.match(MyParser.SETQ)
                self.state = 1015 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1015
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [95, 96]:
                        self.state = 1011
                        self.value()
                        pass
                    elif token in [94]:
                        self.state = 1012
                        self.match(MyParser.SYMBOL)
                        pass
                    elif token in [92]:
                        self.state = 1013
                        self.match(MyParser.VAR)
                        self.state = 1014
                        self.list_()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1017 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & 29) != 0)):
                        break

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1019
                self.match(MyParser.DECLARE)
                self.state = 1020
                self.match(MyParser.LPAREN)
                self.state = 1021
                self.match(MyParser.TYPE)
                self.state = 1022
                self.match(MyParser.DATATYPES)
                self.state = 1024 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1023
                    _la = self._input.LA(1)
                    if not(_la==92 or _la==94):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1026 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==92 or _la==94):
                        break

                self.state = 1028
                self.match(MyParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1029
                self.match(MyParser.DECLARE)
                self.state = 1035 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1030
                    self.match(MyParser.LPAREN)
                    self.state = 1031
                    self.match(MyParser.TYPE)
                    self.state = 1032
                    self.match(MyParser.DATATYPES)
                    self.state = 1033
                    _la = self._input.LA(1)
                    if not(_la==92 or _la==94):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1034
                    self.match(MyParser.RPAREN)
                    self.state = 1037 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==76):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedefineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETF(self):
            return self.getToken(MyParser.LETF, 0)

        def define_function(self):
            return self.getTypedRuleContext(MyParser.Define_functionContext,0)


        def LET(self):
            return self.getToken(MyParser.LET, 0)

        def LPAREN(self):
            return self.getToken(MyParser.LPAREN, 0)

        def binding_list(self):
            return self.getTypedRuleContext(MyParser.Binding_listContext,0)


        def RPAREN(self):
            return self.getToken(MyParser.RPAREN, 0)

        def getRuleIndex(self):
            return MyParser.RULE_redefine

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedefine" ):
                return visitor.visitRedefine(self)
            else:
                return visitor.visitChildren(self)




    def redefine(self):

        localctx = MyParser.RedefineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_redefine)
        try:
            self.state = 1049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1041
                self.match(MyParser.LETF)
                self.state = 1042
                self.define_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                self.match(MyParser.LETF)
                self.state = 1044
                self.match(MyParser.LET)
                self.state = 1045
                self.match(MyParser.LPAREN)
                self.state = 1046
                self.binding_list()
                self.state = 1047
                self.match(MyParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





